/////////////////////////////////////////////////////////
// This class has been automatically generated on Mon Sep 1 19:12:16
// 2008 by ROOT version 5.18/00a from TTree OHltTree/ found on file:
// TEST.root
//////////////////////////////////////////////////////////

#ifndef OHltTree_h
#define OHltTree_h

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <TRandom3.h>
#include <TLorentzVector.h>
#include "Math/PtEtaPhiE4D.h"
#include "Math/PtEtaPhiM4D.h"
#include "Math/LorentzVector.h"

#include <vector>
#include <string>
#include <map>

#include "OHltConfig.h"
#include "OHltMenu.h"
#include "OHltRateCounter.h"

#include "L1GtLogicParser.h"
#include "LumiReweightingForRateEff.h"

#include "TH1.h"
#include "TH2.h"


class OHltTree
{
public:
   TTree *fChain; //!pointer to the analyzed TTree or TChain
   Int_t fCurrent; //!current Tree number in a TChain

   // logic parser for m_l1SeedsLogicalExpression
   std::vector<L1GtLogicParser*> m_l1AlgoLogicParser;

   reweight::LumiReWeighting LumiWeights_;
   
   L1GtLogicParser* m_preFilterLogicParser;
   
   void SetLogicParser(std::string l1SeedsLogicalExpression);

   // Declaration of leaf types

   Int_t NrecoJetCal;
   Int_t NrecoJetCorCal;
   Int_t NrecoJetGen;
   Int_t NrecoTowCal;


 
   Float_t recoJetCalPt[43000]; //[NrecoJetCal]
   Float_t recoJetCalPhi[43000]; //[NrecoJetCal]
   Float_t recoJetCalEta[43000]; //[NrecoJetCal]
   Float_t recoJetCalE[43000]; //[NrecoJetCal]
   Float_t recoJetCalEMF[43000]; //[NrecoJetCal]
   Float_t recoJetCalN90[43000]; //[NrecoJetCal]
   Float_t recoJetCalN90hits[43000]; //[NrecoJetCal]

   Float_t recoJetCorCalPt[43000]; //[NrecoJetCorCal]
   Float_t recoJetCorCalPhi[43000]; //[NrecoJetCorCal]
   Float_t recoJetCorCalEta[43000]; //[NrecoJetCorCal]
   Float_t recoJetCorCalE[43000]; //[NrecoJetCorCal]
   Float_t recoJetCorCalEMF[43000]; //[NrecoJetCal]
   Float_t recoJetCorCalN90[43000]; //[NrecoJetCal]
   Float_t recoJetCorCalN90hits[43000]; //[NrecoJetCal]

   Float_t recoJetGenPt[68000]; //[NrecoJetGen]
   Float_t recoJetGenPhi[68000]; //[NrecoJetGen]
   Float_t recoJetGenEta[68000]; //[NrecoJetGen]
   Float_t recoJetGenEt[68000]; //[NrecoJetGen]
   Float_t recoJetGenE[68000]; //[NrecoJetGen]
   Float_t recoTowEt[684000]; //[NrecoTowCal]
   Float_t recoTowEta[684000]; //[NrecoTowCal]
   Float_t recoTowPhi[684000]; //[NrecoTowCal]
   Float_t recoTowE[684000]; //[NrecoTowCal]
   Float_t recoTowEm[684000]; //[NrecoTowCal]
   Float_t recoTowHad[684000]; //[NrecoTowCal]
   Float_t recoTowOE[684000]; //[NrecoTowCal]

   Float_t recoMetCal;
   Float_t recoMetCalPhi;
   Float_t recoMetCalSum;
   Float_t recoMetGen;
   Float_t recoMetGenPhi;
   Float_t recoMetGenSum;
   Float_t recoHTCal;
   Float_t recoHTCalPhi;
   Float_t recoHTCalSum;
   Int_t recoNVrt; // reconstructed vertex info
   Int_t genNVrt; // generated vertex info
   Float_t recoVrtX[10]; //
   Float_t recoVrtY[10]; //
   Float_t recoVrtZ[10]; //
   Int_t recoVrtNtrk[10]; //
   Float_t recoVrtChi2[10]; //
   Float_t recoVrtNdof[10]; //
   Int_t NrecoElec;
   Float_t recoElecPt[4000]; //[NrecoElec]
   Float_t recoElecPhi[4000]; //[NrecoElec]
   Float_t recoElecEta[4000]; //[NrecoElec]
   Float_t recoElecEt[4000]; //[NrecoElec]
   Float_t recoElecE[4000]; //[NrecoElec]
   Int_t NrecoPhot;
   Float_t recoPhotPt[5000]; //[NrecoPhot]
   Float_t recoPhotPhi[5000]; //[NrecoPhot]
   Float_t recoPhotEta[5000]; //[NrecoPhot]
   Float_t recoPhotEt[5000]; //[NrecoPhot]
   Float_t recoPhotE[5000]; //[NrecoPhot]
	
   Int_t NrecoMuon;
   Float_t recoMuonPt[5000]; //[NrecoMuon]
   Float_t recoMuonPhi[5000]; //[NrecoMuon]
   Float_t recoMuonEta[5000]; //[NrecoMuon]
   Float_t recoMuonEt[5000]; //[NrecoMuon]
   Float_t recoMuonE[5000]; //[NrecoMuon]

   Int_t NMCpart;
   Int_t MCpid[1203000]; //[NMCpart]
   Int_t MCstatus[1203000]; //[NMCpart]
   Float_t MCvtxX[1203000]; //[NMCpart]
   Float_t MCvtxY[1203000]; //[NMCpart]
   Float_t MCvtxZ[1203000]; //[NMCpart]
   Float_t MCpt[1203000]; //[NMCpart]
   Float_t MCeta[1203000]; //[NMCpart]
   Float_t MCphi[1203000]; //[NMCpart]
   Float_t MCPtHat;
   Float_t MCWeight;
   Float_t MCWeightSign;
   Int_t MCmu3;
   Int_t MCel3;
   Int_t MCbb;
   Int_t MCab;
   Int_t MCWenu;
   Int_t MCWmunu;
   Int_t MCZee;
   Int_t MCZmumu;
   Float_t MCptEleMax;
   Float_t MCptMuMax;
   Int_t Run;
   Int_t Event;
   Int_t LumiBlock;
   Int_t Bx;
   Int_t Orbit;
   Double_t AvgInstDelLumi;


   // Autogenerated L1 - Int_t
  Int_t           L1Tech_CASTOR_HaloMuonv0;
  Int_t           L1Tech_CASTOR_MediumJetv0;
  Int_t           L1Tech_CASTOR_HighJetv0;
  Int_t           L1Tech_CASTOR_Gapv0;
  Int_t           L1Tech_TOTEM_3;
  Int_t           L1Tech_TOTEM_2;
  Int_t           L1Tech_TOTEM_1;
  Int_t           L1Tech_TOTEM_0;
  Int_t           L1Tech__TTU_RB0_Cosmicsv0;
  Int_t           L1Tech_RPC_TTU_RBplus1_Cosmicsv0;
  Int_t           L1Tech_RPC_TTU_RBplus2_Cosmicsv0;
  Int_t           L1Tech_RPC_TTU_pointing_Cosmicsv0;
  Int_t           L1Tech_RPC_TTU_barrel_Cosmicsv0;
  Int_t           L1Tech_DT_GlobalORv0;
  Int_t           L1Tech_BPTX_PreBPTXv0;
  Int_t           L1Tech_HCAL_HBHE_totalORv0;
  Int_t           L1Tech_HCAL_HO_totalORv0;
  Int_t           L1Tech_HCAL_HF_MMP_or_MPPv1;
  Int_t           L1Tech_HCAL_HF_coincidence_PMv2;
  Int_t           L1Tech_HCAL_HF_single_channelv0;
  Int_t           L1Tech_BPTX_quietv0;
  Int_t           L1Tech_BPTX_minus_AND_not_plusv0;
  Int_t           L1Tech_BPTX_plus_AND_NOT_minusv0;
  Int_t           L1Tech_BPTX_plus_AND_minus_instance1v0;
  Int_t           L1Tech_BPTX_plus_OR_minusv0;
  Int_t           L1Tech_BPTX_minusv0;
  Int_t           L1Tech_BPTX_plusv0;
  Int_t           L1Tech_BPTX_plus_AND_minusv0;
  Int_t           L1_SingleMuBeamHalo;
  Int_t           L1_DoubleMu_10_0_WdEta18;
  Int_t           L1_DoubleMu_12_5;
  Int_t           L1_DoubleMu0_Eta1p6_WdEta18_OS;
  Int_t           L1_SingleMu18er;
  Int_t           L1_QuadMu0;
  Int_t           L1_TripleJet_92_76_64;
  Int_t           L1_RomanPotsAND;
  Int_t           L1_ETT130;
  Int_t           L1_ETM70_NotJet52WdPhi2;
  Int_t           L1_ETM60_NotJet52WdPhi2;
  Int_t           L1_DoubleMu0_Eta1p6_WdEta18;
  Int_t           L1_DoubleJetC56_ETM60;
  Int_t           L1_SingleJetC20_NotBptxOR;
  Int_t           L1_QuadJetC60;
  Int_t           L1_DoubleJetC100;
  Int_t           L1_ETM60;
  Int_t           L1_Jet32_MuOpen_EG10_MuEGNotWdPhi3_JetMuWdPhi1;
  Int_t           L1_Jet32_DoubleMu_Open_10_MuMuNotWdPhi23_JetMuWdPhi1;
  Int_t           L1_DoubleJetC32_WdPhi7_HTT125;
  Int_t           L1_DoubleJetC60_ETM60;
  Int_t           L1_Mu0er_ETM55;
  Int_t           L1_DoubleEG_20_10_1LegIso;
  Int_t           L1_DoubleEG_22_10;
  Int_t           L1_DoubleEG_15_10;
  Int_t           L1_TripleEG_14_10_8;
  Int_t           L1_SingleJet12;
  Int_t           L1_TripleMu_5_5_3;
  Int_t           L1_TripleMu0;
  Int_t           L1_DoubleMuOpen;
  Int_t           L1_ETT90;
  Int_t           L1_ETT60;
  Int_t           L1_QuadJetC36_TauJet52;
  Int_t           L1_DoubleEG6_HTT150;
  Int_t           L1_Mu5_DoubleEG5;
  Int_t           L1_DoubleMu6_EG6;
  Int_t           L1_SingleMuOpen_NotBptxOR;
  Int_t           L1_Mu4_EG18;
  Int_t           L1_Mu8_HTT125;
  Int_t           L1_SingleMu16_Eta2p1;
  Int_t           L1_DoubleMu7_EG7;
  Int_t           L1_Mu14er_ETM30;
  Int_t           L1_Mu10er_ETM50;
  Int_t           L1_Mu6_HTT150;
  Int_t           L1_Mu20_EG8;
  Int_t           L1_HTT250;
  Int_t           L1_ETM40;
  Int_t           L1_SingleJetC32_NotBptxOR;
  Int_t           L1_Mu6_DoubleEG10;
  Int_t           L1_Mu5_IsoEG18;
  Int_t           L1_Mu5_EG20;
  Int_t           L1_Mu20_EG10;
  Int_t           L1_HTT200;
  Int_t           L1_HTT175;
  Int_t           L1_HTT150;
  Int_t           L1_HTT125;
  Int_t           L1_ETM100;
  Int_t           L1_ETM70;
  Int_t           L1_ETM50;
  Int_t           L1_ETM30;
  Int_t           L1_SingleMu30;
  Int_t           L1_SingleMu25;
  Int_t           L1_SingleMu25er;
  Int_t           L1_SingleMu20;
  Int_t           L1_SingleMu12;
  Int_t           L1_SingleMu20er;
  Int_t           L1_ETT40;
  Int_t           L1_SingleMu5;
  Int_t           L1_SingleEG15;
  Int_t           L1_SingleMu16;
  Int_t           L1_SingleMuOpen;
  Int_t           L1_SingleEG35;
  Int_t           L1_SingleEG30;
  Int_t           L1_SingleEG20;
  Int_t           L1_SingleIsoEG20er;
  Int_t           L1_SingleIsoEG18;
  Int_t           L1_SingleEG40;
  Int_t           L1_SingleEG25;
  Int_t           L1_SingleEG5;
  Int_t           L1_QuadJetC40;
  Int_t           L1_DoubleMu_10_3p5;
  Int_t           L1_DoubleMu_10_Open;
  Int_t           L1_DoubleJetC112;
  Int_t           L1_SingleMu14_Eta2p1;
  Int_t           L1_DoubleJetC84;
  Int_t           L1_DoubleJetC52;
  Int_t           L1_SingleJet240;
  Int_t           L1_SingleIsoEG22er;
  Int_t           L1_SingleEG10;
  Int_t           L1_SingleIsoEG30er;
  Int_t           L1_SingleIsoEG28er;
  Int_t           L1_SingleIsoEG25;
  Int_t           L1_SingleIsoEG25er;
  Int_t           L1_SingleEG35er;
  Int_t           L1_EG25er_HTT125;
  Int_t           L1_Mu3_JetC52_WdEtaPhi2;
  Int_t           L1_Mu3_JetC16_WdEtaPhi2;
  Int_t           L1_ETT15;
  Int_t           L1_SingleMu30er;
  Int_t           L1_DoubleMu0;
  Int_t           L1_DoubleTauJet44er;
  Int_t           L1_DoubleTauJet36er;
  Int_t           L1_SingleJet36;
  Int_t           L1_SingleJet200;
  Int_t           L1_SingleJet176;
  Int_t           L1_SingleJet128;
  Int_t           L1_SingleJet92;
  Int_t           L1_SingleJet68;
  Int_t           L1_SingleJet52;
  Int_t           L1_DoubleJetC120;
  Int_t           L1_DoubleJetC72;
  Int_t           L1_QuadJetC84;
  Int_t           L1_Mu16er_TauJet20er;
  Int_t           L1_IsoEG20er_TauJet20er_NotWdEta0;
  Int_t           L1_DoubleTauJet40er;
  Int_t           L1_Mu5_EG15;
  Int_t           L1_Mu12_EG10;
  Int_t           L1_Mu16er_TauJet40erORCenJet72er;
  Int_t           L1_MinimumBiasHF2_OR;
  Int_t           L1_MinimumBiasHF2_AND;
  Int_t           L1_MinimumBiasHF1_OR;
  Int_t           L1_MinimumBiasHF1_AND_v1;
  Int_t           L1_SingleJet16;
  Int_t           L1_SingleEG2;
  Int_t           L1_AlwaysTrue;
  Int_t           L1_ZeroBias;


   // Autogenerated L1 - Prescale Int_t
  Int_t           L1Tech_CASTOR_HaloMuonv0_Prescl;
  Int_t           L1Tech_CASTOR_MediumJetv0_Prescl;
  Int_t           L1Tech_CASTOR_HighJetv0_Prescl;
  Int_t           L1Tech_CASTOR_Gapv0_Prescl;
  Int_t           L1Tech_TOTEM_3_Prescl;
  Int_t           L1Tech_TOTEM_2_Prescl;
  Int_t           L1Tech_TOTEM_1_Prescl;
  Int_t           L1Tech_TOTEM_0_Prescl;
  Int_t           L1Tech__TTU_RB0_Cosmicsv0_Prescl;
  Int_t           L1Tech_RPC_TTU_RBplus1_Cosmicsv0_Prescl;
  Int_t           L1Tech_RPC_TTU_RBplus2_Cosmicsv0_Prescl;
  Int_t           L1Tech_RPC_TTU_pointing_Cosmicsv0_Prescl;
  Int_t           L1Tech_RPC_TTU_barrel_Cosmicsv0_Prescl;
  Int_t           L1Tech_DT_GlobalORv0_Prescl;
  Int_t           L1Tech_BPTX_PreBPTXv0_Prescl;
  Int_t           L1Tech_HCAL_HBHE_totalORv0_Prescl;
  Int_t           L1Tech_HCAL_HO_totalORv0_Prescl;
  Int_t           L1Tech_HCAL_HF_MMP_or_MPPv1_Prescl;
  Int_t           L1Tech_HCAL_HF_coincidence_PMv2_Prescl;
  Int_t           L1Tech_HCAL_HF_single_channelv0_Prescl;
  Int_t           L1Tech_BPTX_quietv0_Prescl;
  Int_t           L1Tech_BPTX_minus_AND_not_plusv0_Prescl;
  Int_t           L1Tech_BPTX_plus_AND_NOT_minusv0_Prescl;
  Int_t           L1Tech_BPTX_plus_AND_minus_instance1v0_Prescl;
  Int_t           L1Tech_BPTX_plus_OR_minusv0_Prescl;
  Int_t           L1Tech_BPTX_minusv0_Prescl;
  Int_t           L1Tech_BPTX_plusv0_Prescl;
  Int_t           L1Tech_BPTX_plus_AND_minusv0_Prescl;
  Int_t           L1_SingleMuBeamHalo_Prescl;
  Int_t           L1_DoubleMu_10_0_WdEta18_Prescl;
  Int_t           L1_DoubleMu_12_5_Prescl;
  Int_t           L1_DoubleMu0_Eta1p6_WdEta18_OS_Prescl;
  Int_t           L1_SingleMu18er_Prescl;
  Int_t           L1_QuadMu0_Prescl;
  Int_t           L1_TripleJet_92_76_64_Prescl;
  Int_t           L1_RomanPotsAND_Prescl;
  Int_t           L1_ETT130_Prescl;
  Int_t           L1_ETM70_NotJet52WdPhi2_Prescl;
  Int_t           L1_ETM60_NotJet52WdPhi2_Prescl;
  Int_t           L1_DoubleMu0_Eta1p6_WdEta18_Prescl;
  Int_t           L1_DoubleJetC56_ETM60_Prescl;
  Int_t           L1_SingleJetC20_NotBptxOR_Prescl;
  Int_t           L1_QuadJetC60_Prescl;
  Int_t           L1_DoubleJetC100_Prescl;
  Int_t           L1_ETM60_Prescl;
  Int_t           L1_Jet32_MuOpen_EG10_MuEGNotWdPhi3_JetMuWdPhi1_Prescl;
  Int_t           L1_Jet32_DoubleMu_Open_10_MuMuNotWdPhi23_JetMuWdPhi1_Prescl;
  Int_t           L1_DoubleJetC32_WdPhi7_HTT125_Prescl;
  Int_t           L1_DoubleJetC60_ETM60_Prescl;
  Int_t           L1_Mu0er_ETM55_Prescl;
  Int_t           L1_DoubleEG_20_10_1LegIso_Prescl;
  Int_t           L1_DoubleEG_22_10_Prescl;
  Int_t           L1_DoubleEG_15_10_Prescl;
  Int_t           L1_TripleEG_14_10_8_Prescl;
  Int_t           L1_SingleJet12_Prescl;
  Int_t           L1_TripleMu_5_5_3_Prescl;
  Int_t           L1_TripleMu0_Prescl;
  Int_t           L1_DoubleMuOpen_Prescl;
  Int_t           L1_ETT90_Prescl;
  Int_t           L1_ETT60_Prescl;
  Int_t           L1_QuadJetC36_TauJet52_Prescl;
  Int_t           L1_DoubleEG6_HTT150_Prescl;
  Int_t           L1_Mu5_DoubleEG5_Prescl;
  Int_t           L1_DoubleMu6_EG6_Prescl;
  Int_t           L1_SingleMuOpen_NotBptxOR_Prescl;
  Int_t           L1_Mu4_EG18_Prescl;
  Int_t           L1_Mu8_HTT125_Prescl;
  Int_t           L1_SingleMu16_Eta2p1_Prescl;
  Int_t           L1_DoubleMu7_EG7_Prescl;
  Int_t           L1_Mu14er_ETM30_Prescl;
  Int_t           L1_Mu10er_ETM50_Prescl;
  Int_t           L1_Mu6_HTT150_Prescl;
  Int_t           L1_Mu20_EG8_Prescl;
  Int_t           L1_HTT250_Prescl;
  Int_t           L1_ETM40_Prescl;
  Int_t           L1_SingleJetC32_NotBptxOR_Prescl;
  Int_t           L1_Mu6_DoubleEG10_Prescl;
  Int_t           L1_Mu5_IsoEG18_Prescl;
  Int_t           L1_Mu5_EG20_Prescl;
  Int_t           L1_Mu20_EG10_Prescl;
  Int_t           L1_HTT200_Prescl;
  Int_t           L1_HTT175_Prescl;
  Int_t           L1_HTT150_Prescl;
  Int_t           L1_HTT125_Prescl;
  Int_t           L1_ETM100_Prescl;
  Int_t           L1_ETM70_Prescl;
  Int_t           L1_ETM50_Prescl;
  Int_t           L1_ETM30_Prescl;
  Int_t           L1_SingleMu30_Prescl;
  Int_t           L1_SingleMu25_Prescl;
  Int_t           L1_SingleMu25er_Prescl;
  Int_t           L1_SingleMu20_Prescl;
  Int_t           L1_SingleMu12_Prescl;
  Int_t           L1_SingleMu20er_Prescl;
  Int_t           L1_ETT40_Prescl;
  Int_t           L1_SingleMu5_Prescl;
  Int_t           L1_SingleEG15_Prescl;
  Int_t           L1_SingleMu16_Prescl;
  Int_t           L1_SingleMuOpen_Prescl;
  Int_t           L1_SingleEG35_Prescl;
  Int_t           L1_SingleEG30_Prescl;
  Int_t           L1_SingleEG20_Prescl;
  Int_t           L1_SingleIsoEG20er_Prescl;
  Int_t           L1_SingleIsoEG18_Prescl;
  Int_t           L1_SingleEG40_Prescl;
  Int_t           L1_SingleEG25_Prescl;
  Int_t           L1_SingleEG5_Prescl;
  Int_t           L1_QuadJetC40_Prescl;
  Int_t           L1_DoubleMu_10_3p5_Prescl;
  Int_t           L1_DoubleMu_10_Open_Prescl;
  Int_t           L1_DoubleJetC112_Prescl;
  Int_t           L1_SingleMu14_Eta2p1_Prescl;
  Int_t           L1_DoubleJetC84_Prescl;
  Int_t           L1_DoubleJetC52_Prescl;
  Int_t           L1_SingleJet240_Prescl;
  Int_t           L1_SingleIsoEG22er_Prescl;
  Int_t           L1_SingleEG10_Prescl;
  Int_t           L1_SingleIsoEG30er_Prescl;
  Int_t           L1_SingleIsoEG28er_Prescl;
  Int_t           L1_SingleIsoEG25_Prescl;
  Int_t           L1_SingleIsoEG25er_Prescl;
  Int_t           L1_SingleEG35er_Prescl;
  Int_t           L1_EG25er_HTT125_Prescl;
  Int_t           L1_Mu3_JetC52_WdEtaPhi2_Prescl;
  Int_t           L1_Mu3_JetC16_WdEtaPhi2_Prescl;
  Int_t           L1_ETT15_Prescl;
  Int_t           L1_SingleMu30er_Prescl;
  Int_t           L1_DoubleMu0_Prescl;
  Int_t           L1_DoubleTauJet44er_Prescl;
  Int_t           L1_DoubleTauJet36er_Prescl;
  Int_t           L1_SingleJet36_Prescl;
  Int_t           L1_SingleJet200_Prescl;
  Int_t           L1_SingleJet176_Prescl;
  Int_t           L1_SingleJet128_Prescl;
  Int_t           L1_SingleJet92_Prescl;
  Int_t           L1_SingleJet68_Prescl;
  Int_t           L1_SingleJet52_Prescl;
  Int_t           L1_DoubleJetC120_Prescl;
  Int_t           L1_DoubleJetC72_Prescl;
  Int_t           L1_QuadJetC84_Prescl;
  Int_t           L1_Mu16er_TauJet20er_Prescl;
  Int_t           L1_IsoEG20er_TauJet20er_NotWdEta0_Prescl;
  Int_t           L1_DoubleTauJet40er_Prescl;
  Int_t           L1_Mu5_EG15_Prescl;
  Int_t           L1_Mu12_EG10_Prescl;
  Int_t           L1_Mu16er_TauJet40erORCenJet72er_Prescl;
  Int_t           L1_MinimumBiasHF2_OR_Prescl;
  Int_t           L1_MinimumBiasHF2_AND_Prescl;
  Int_t           L1_MinimumBiasHF1_OR_Prescl;
  Int_t           L1_MinimumBiasHF1_AND_v1_Prescl;
  Int_t           L1_SingleJet16_Prescl;
  Int_t           L1_SingleEG2_Prescl;
  Int_t           L1_AlwaysTrue_Prescl;
  Int_t           L1_ZeroBias_Prescl;

   // Autogenerated from ConfDB - Int_t


   // Autogenerated from ConfDB - Prescale Int_t






   // List of branches
   TBranch *b_NrecoJetCal; //!
   TBranch *b_NrecoJetCorCal; //!
   TBranch *b_NrecoJetGen; //!
   TBranch *b_NrecoTowCal; //!

   TBranch *b_recoJetCalPt; //!
   TBranch *b_recoJetCalPhi; //!
   TBranch *b_recoJetCalEta; //!
   TBranch *b_recoJetCalE; //!
   TBranch *b_recoJetCalEMF; //!
   TBranch *b_recoJetCalN90; //!
   TBranch *b_recoJetCalN90hits; //!

   TBranch *b_recoJetCorCalPt; //!
   TBranch *b_recoJetCorCalPhi; //!
   TBranch *b_recoJetCorCalEta; //!
   TBranch *b_recoJetCorCalE; //!
   TBranch *b_recoJetCorCalEMF; //!
   TBranch *b_recoJetCorCalN90; // !  
   TBranch *b_recoJetCorCalN90hits; // !  

   TBranch *b_recoJetGenPt; //!
   TBranch *b_recoJetGenPhi; //!
   TBranch *b_recoJetGenEta; //!
   TBranch *b_recoJetGenEt; //!
   TBranch *b_recoJetGenE; //!
   TBranch *b_recoTowEt; //!
   TBranch *b_recoTowEta; //!
   TBranch *b_recoTowPhi; //!
   TBranch *b_recoTowE; //!
   TBranch *b_recoTowEm; //!
   TBranch *b_recoTowHad; //!
   TBranch *b_recoTowOE; //!
   TBranch *b_recoMetCal; //!
   TBranch *b_recoMetCalPhi; //!
   TBranch *b_recoMetCalSum; //!
   TBranch *b_recoMetGen; //!
   TBranch *b_recoMetGenPhi; //!
   TBranch *b_recoMetGenSum; //!
   TBranch *b_recoHTCal; //!
   TBranch *b_recoHTCalPhi; //!
   TBranch *b_recoHTCalSum; //!
   TBranch *b_recoNVrt; //!
   TBranch *b_genNVrt; //!
   TBranch *b_recoVrtX; //!
   TBranch *b_recoVrtY; //!
   TBranch *b_recoVrtZ; //!
   TBranch *b_recoVrtNtrk; //!
   TBranch *b_recoVrtChi2; //!
   TBranch *b_recoVrtNdof; //!
   TBranch *b_NrecoElec; //!
   TBranch *b_recoElecPt; //!
   TBranch *b_recoElecPhi; //!
   TBranch *b_recoElecEta; //!
   TBranch *b_recoElecEt; //!
   TBranch *b_recoElecE; //!
   TBranch *b_NrecoPhot; //!
   TBranch *b_recoPhotPt; //!
   TBranch *b_recoPhotPhi; //!
   TBranch *b_recoPhotEta; //!
   TBranch *b_recoPhotEt; //!
   TBranch *b_recoPhotE; //!
   TBranch *b_NrecoMuon; //!
   TBranch *b_recoMuonPt; //!
   TBranch *b_recoMuonPhi; //!
   TBranch *b_recoMuonEta; //!
   TBranch *b_recoMuonEt; //!
   TBranch *b_recoMuonE; //!
   TBranch *b_NMCpart; //!
   TBranch *b_MCpid; //!
   TBranch *b_MCstatus; //!
   TBranch *b_MCvtxX; //!
   TBranch *b_MCvtxY; //!
   TBranch *b_MCvtxZ; //!
   TBranch *b_MCpt; //!
   TBranch *b_MCeta; //!
   TBranch *b_MCphi; //!
   TBranch *b_MCPtHat; //!
   TBranch *b_MCWeight; //!
   TBranch *b_MCWeightSign; //!
   TBranch *b_MCmu3; //!
   TBranch *b_MCel3; //!
   TBranch *b_MCbb; //!
   TBranch *b_MCab; //!
   TBranch *b_MCWenu; //!
   TBranch *b_MCmunu; //!
   TBranch *b_MCZee; //!
   TBranch *b_MCZmumu; //!
   TBranch *b_MCptEleMax; //!
   TBranch *b_MCptMuMax; //!
   TBranch *b_Run; //!
   TBranch *b_Event; //!
   TBranch *b_LumiBlock; //!
   TBranch *b_Bx; //!
   TBranch *b_Orbit; //!
   TBranch *b_AvgInstDelLumi; //!


   // Autogenerated L1 - TBranch 
  TBranch        *b_L1Tech_CASTOR_HaloMuonv0;   //!
  TBranch        *b_L1Tech_CASTOR_MediumJetv0;   //!
  TBranch        *b_L1Tech_CASTOR_HighJetv0;   //!
  TBranch        *b_L1Tech_CASTOR_Gapv0;   //!
  TBranch        *b_L1Tech_TOTEM_3;   //!
  TBranch        *b_L1Tech_TOTEM_2;   //!
  TBranch        *b_L1Tech_TOTEM_1;   //!
  TBranch        *b_L1Tech_TOTEM_0;   //!
  TBranch        *b_L1Tech__TTU_RB0_Cosmicsv0;   //!
  TBranch        *b_L1Tech_RPC_TTU_RBplus1_Cosmicsv0;   //!
  TBranch        *b_L1Tech_RPC_TTU_RBplus2_Cosmicsv0;   //!
  TBranch        *b_L1Tech_RPC_TTU_pointing_Cosmicsv0;   //!
  TBranch        *b_L1Tech_RPC_TTU_barrel_Cosmicsv0;   //!
  TBranch        *b_L1Tech_DT_GlobalORv0;   //!
  TBranch        *b_L1Tech_BPTX_PreBPTXv0;   //!
  TBranch        *b_L1Tech_HCAL_HBHE_totalORv0;   //!
  TBranch        *b_L1Tech_HCAL_HO_totalORv0;   //!
  TBranch        *b_L1Tech_HCAL_HF_MMP_or_MPPv1;   //!
  TBranch        *b_L1Tech_HCAL_HF_coincidence_PMv2;   //!
  TBranch        *b_L1Tech_HCAL_HF_single_channelv0;   //!
  TBranch        *b_L1Tech_BPTX_quietv0;   //!
  TBranch        *b_L1Tech_BPTX_minus_AND_not_plusv0;   //!
  TBranch        *b_L1Tech_BPTX_plus_AND_NOT_minusv0;   //!
  TBranch        *b_L1Tech_BPTX_plus_AND_minus_instance1v0;   //!
  TBranch        *b_L1Tech_BPTX_plus_OR_minusv0;   //!
  TBranch        *b_L1Tech_BPTX_minusv0;   //!
  TBranch        *b_L1Tech_BPTX_plusv0;   //!
  TBranch        *b_L1Tech_BPTX_plus_AND_minusv0;   //!
  TBranch        *b_L1_SingleMuBeamHalo;   //!
  TBranch        *b_L1_DoubleMu_10_0_WdEta18;   //!
  TBranch        *b_L1_DoubleMu_12_5;   //!
  TBranch        *b_L1_DoubleMu0_Eta1p6_WdEta18_OS;   //!
  TBranch        *b_L1_SingleMu18er;   //!
  TBranch        *b_L1_QuadMu0;   //!
  TBranch        *b_L1_TripleJet_92_76_64;   //!
  TBranch        *b_L1_RomanPotsAND;   //!
  TBranch        *b_L1_ETT130;   //!
  TBranch        *b_L1_ETM70_NotJet52WdPhi2;   //!
  TBranch        *b_L1_ETM60_NotJet52WdPhi2;   //!
  TBranch        *b_L1_DoubleMu0_Eta1p6_WdEta18;   //!
  TBranch        *b_L1_DoubleJetC56_ETM60;   //!
  TBranch        *b_L1_SingleJetC20_NotBptxOR;   //!
  TBranch        *b_L1_QuadJetC60;   //!
  TBranch        *b_L1_DoubleJetC100;   //!
  TBranch        *b_L1_ETM60;   //!
  TBranch        *b_L1_Jet32_MuOpen_EG10_MuEGNotWdPhi3_JetMuWdPhi1;   //!
  TBranch        *b_L1_Jet32_DoubleMu_Open_10_MuMuNotWdPhi23_JetMuWdPhi1;   //!
  TBranch        *b_L1_DoubleJetC32_WdPhi7_HTT125;   //!
  TBranch        *b_L1_DoubleJetC60_ETM60;   //!
  TBranch        *b_L1_Mu0er_ETM55;   //!
  TBranch        *b_L1_DoubleEG_20_10_1LegIso;   //!
  TBranch        *b_L1_DoubleEG_22_10;   //!
  TBranch        *b_L1_DoubleEG_15_10;   //!
  TBranch        *b_L1_TripleEG_14_10_8;   //!
  TBranch        *b_L1_SingleJet12;   //!
  TBranch        *b_L1_TripleMu_5_5_3;   //!
  TBranch        *b_L1_TripleMu0;   //!
  TBranch        *b_L1_DoubleMuOpen;   //!
  TBranch        *b_L1_ETT90;   //!
  TBranch        *b_L1_ETT60;   //!
  TBranch        *b_L1_QuadJetC36_TauJet52;   //!
  TBranch        *b_L1_DoubleEG6_HTT150;   //!
  TBranch        *b_L1_Mu5_DoubleEG5;   //!
  TBranch        *b_L1_DoubleMu6_EG6;   //!
  TBranch        *b_L1_SingleMuOpen_NotBptxOR;   //!
  TBranch        *b_L1_Mu4_EG18;   //!
  TBranch        *b_L1_Mu8_HTT125;   //!
  TBranch        *b_L1_SingleMu16_Eta2p1;   //!
  TBranch        *b_L1_DoubleMu7_EG7;   //!
  TBranch        *b_L1_Mu14er_ETM30;   //!
  TBranch        *b_L1_Mu10er_ETM50;   //!
  TBranch        *b_L1_Mu6_HTT150;   //!
  TBranch        *b_L1_Mu20_EG8;   //!
  TBranch        *b_L1_HTT250;   //!
  TBranch        *b_L1_ETM40;   //!
  TBranch        *b_L1_SingleJetC32_NotBptxOR;   //!
  TBranch        *b_L1_Mu6_DoubleEG10;   //!
  TBranch        *b_L1_Mu5_IsoEG18;   //!
  TBranch        *b_L1_Mu5_EG20;   //!
  TBranch        *b_L1_Mu20_EG10;   //!
  TBranch        *b_L1_HTT200;   //!
  TBranch        *b_L1_HTT175;   //!
  TBranch        *b_L1_HTT150;   //!
  TBranch        *b_L1_HTT125;   //!
  TBranch        *b_L1_ETM100;   //!
  TBranch        *b_L1_ETM70;   //!
  TBranch        *b_L1_ETM50;   //!
  TBranch        *b_L1_ETM30;   //!
  TBranch        *b_L1_SingleMu30;   //!
  TBranch        *b_L1_SingleMu25;   //!
  TBranch        *b_L1_SingleMu25er;   //!
  TBranch        *b_L1_SingleMu20;   //!
  TBranch        *b_L1_SingleMu12;   //!
  TBranch        *b_L1_SingleMu20er;   //!
  TBranch        *b_L1_ETT40;   //!
  TBranch        *b_L1_SingleMu5;   //!
  TBranch        *b_L1_SingleEG15;   //!
  TBranch        *b_L1_SingleMu16;   //!
  TBranch        *b_L1_SingleMuOpen;   //!
  TBranch        *b_L1_SingleEG35;   //!
  TBranch        *b_L1_SingleEG30;   //!
  TBranch        *b_L1_SingleEG20;   //!
  TBranch        *b_L1_SingleIsoEG20er;   //!
  TBranch        *b_L1_SingleIsoEG18;   //!
  TBranch        *b_L1_SingleEG40;   //!
  TBranch        *b_L1_SingleEG25;   //!
  TBranch        *b_L1_SingleEG5;   //!
  TBranch        *b_L1_QuadJetC40;   //!
  TBranch        *b_L1_DoubleMu_10_3p5;   //!
  TBranch        *b_L1_DoubleMu_10_Open;   //!
  TBranch        *b_L1_DoubleJetC112;   //!
  TBranch        *b_L1_SingleMu14_Eta2p1;   //!
  TBranch        *b_L1_DoubleJetC84;   //!
  TBranch        *b_L1_DoubleJetC52;   //!
  TBranch        *b_L1_SingleJet240;   //!
  TBranch        *b_L1_SingleIsoEG22er;   //!
  TBranch        *b_L1_SingleEG10;   //!
  TBranch        *b_L1_SingleIsoEG30er;   //!
  TBranch        *b_L1_SingleIsoEG28er;   //!
  TBranch        *b_L1_SingleIsoEG25;   //!
  TBranch        *b_L1_SingleIsoEG25er;   //!
  TBranch        *b_L1_SingleEG35er;   //!
  TBranch        *b_L1_EG25er_HTT125;   //!
  TBranch        *b_L1_Mu3_JetC52_WdEtaPhi2;   //!
  TBranch        *b_L1_Mu3_JetC16_WdEtaPhi2;   //!
  TBranch        *b_L1_ETT15;   //!
  TBranch        *b_L1_SingleMu30er;   //!
  TBranch        *b_L1_DoubleMu0;   //!
  TBranch        *b_L1_DoubleTauJet44er;   //!
  TBranch        *b_L1_DoubleTauJet36er;   //!
  TBranch        *b_L1_SingleJet36;   //!
  TBranch        *b_L1_SingleJet200;   //!
  TBranch        *b_L1_SingleJet176;   //!
  TBranch        *b_L1_SingleJet128;   //!
  TBranch        *b_L1_SingleJet92;   //!
  TBranch        *b_L1_SingleJet68;   //!
  TBranch        *b_L1_SingleJet52;   //!
  TBranch        *b_L1_DoubleJetC120;   //!
  TBranch        *b_L1_DoubleJetC72;   //!
  TBranch        *b_L1_QuadJetC84;   //!
  TBranch        *b_L1_Mu16er_TauJet20er;   //!
  TBranch        *b_L1_IsoEG20er_TauJet20er_NotWdEta0;   //!
  TBranch        *b_L1_DoubleTauJet40er;   //!
  TBranch        *b_L1_Mu5_EG15;   //!
  TBranch        *b_L1_Mu12_EG10;   //!
  TBranch        *b_L1_Mu16er_TauJet40erORCenJet72er;   //!
  TBranch        *b_L1_MinimumBiasHF2_OR;   //!
  TBranch        *b_L1_MinimumBiasHF2_AND;   //!
  TBranch        *b_L1_MinimumBiasHF1_OR;   //!
  TBranch        *b_L1_MinimumBiasHF1_AND_v1;   //!
  TBranch        *b_L1_SingleJet16;   //!
  TBranch        *b_L1_SingleEG2;   //!
  TBranch        *b_L1_AlwaysTrue;   //!
  TBranch        *b_L1_ZeroBias;   //!

   // Autogenerated from ConfDB - TBranch

   // Autogenerated L1 - Prescale TBranch 
  TBranch        *b_L1Tech_CASTOR_HaloMuonv0_Prescl;   //!
  TBranch        *b_L1Tech_CASTOR_MediumJetv0_Prescl;   //!
  TBranch        *b_L1Tech_CASTOR_HighJetv0_Prescl;   //!
  TBranch        *b_L1Tech_CASTOR_Gapv0_Prescl;   //!
  TBranch        *b_L1Tech_TOTEM_3_Prescl;   //!
  TBranch        *b_L1Tech_TOTEM_2_Prescl;   //!
  TBranch        *b_L1Tech_TOTEM_1_Prescl;   //!
  TBranch        *b_L1Tech_TOTEM_0_Prescl;   //!
  TBranch        *b_L1Tech__TTU_RB0_Cosmicsv0_Prescl;   //!
  TBranch        *b_L1Tech_RPC_TTU_RBplus1_Cosmicsv0_Prescl;   //!
  TBranch        *b_L1Tech_RPC_TTU_RBplus2_Cosmicsv0_Prescl;   //!
  TBranch        *b_L1Tech_RPC_TTU_pointing_Cosmicsv0_Prescl;   //!
  TBranch        *b_L1Tech_RPC_TTU_barrel_Cosmicsv0_Prescl;   //!
  TBranch        *b_L1Tech_DT_GlobalORv0_Prescl;   //!
  TBranch        *b_L1Tech_BPTX_PreBPTXv0_Prescl;   //!
  TBranch        *b_L1Tech_HCAL_HBHE_totalORv0_Prescl;   //!
  TBranch        *b_L1Tech_HCAL_HO_totalORv0_Prescl;   //!
  TBranch        *b_L1Tech_HCAL_HF_MMP_or_MPPv1_Prescl;   //!
  TBranch        *b_L1Tech_HCAL_HF_coincidence_PMv2_Prescl;   //!
  TBranch        *b_L1Tech_HCAL_HF_single_channelv0_Prescl;   //!
  TBranch        *b_L1Tech_BPTX_quietv0_Prescl;   //!
  TBranch        *b_L1Tech_BPTX_minus_AND_not_plusv0_Prescl;   //!
  TBranch        *b_L1Tech_BPTX_plus_AND_NOT_minusv0_Prescl;   //!
  TBranch        *b_L1Tech_BPTX_plus_AND_minus_instance1v0_Prescl;   //!
  TBranch        *b_L1Tech_BPTX_plus_OR_minusv0_Prescl;   //!
  TBranch        *b_L1Tech_BPTX_minusv0_Prescl;   //!
  TBranch        *b_L1Tech_BPTX_plusv0_Prescl;   //!
  TBranch        *b_L1Tech_BPTX_plus_AND_minusv0_Prescl;   //!
  TBranch        *b_L1_SingleMuBeamHalo_Prescl;   //!
  TBranch        *b_L1_DoubleMu_10_0_WdEta18_Prescl;   //!
  TBranch        *b_L1_DoubleMu_12_5_Prescl;   //!
  TBranch        *b_L1_DoubleMu0_Eta1p6_WdEta18_OS_Prescl;   //!
  TBranch        *b_L1_SingleMu18er_Prescl;   //!
  TBranch        *b_L1_QuadMu0_Prescl;   //!
  TBranch        *b_L1_TripleJet_92_76_64_Prescl;   //!
  TBranch        *b_L1_RomanPotsAND_Prescl;   //!
  TBranch        *b_L1_ETT130_Prescl;   //!
  TBranch        *b_L1_ETM70_NotJet52WdPhi2_Prescl;   //!
  TBranch        *b_L1_ETM60_NotJet52WdPhi2_Prescl;   //!
  TBranch        *b_L1_DoubleMu0_Eta1p6_WdEta18_Prescl;   //!
  TBranch        *b_L1_DoubleJetC56_ETM60_Prescl;   //!
  TBranch        *b_L1_SingleJetC20_NotBptxOR_Prescl;   //!
  TBranch        *b_L1_QuadJetC60_Prescl;   //!
  TBranch        *b_L1_DoubleJetC100_Prescl;   //!
  TBranch        *b_L1_ETM60_Prescl;   //!
  TBranch        *b_L1_Jet32_MuOpen_EG10_MuEGNotWdPhi3_JetMuWdPhi1_Prescl;   //!
  TBranch        *b_L1_Jet32_DoubleMu_Open_10_MuMuNotWdPhi23_JetMuWdPhi1_Prescl;   //!
  TBranch        *b_L1_DoubleJetC32_WdPhi7_HTT125_Prescl;   //!
  TBranch        *b_L1_DoubleJetC60_ETM60_Prescl;   //!
  TBranch        *b_L1_Mu0er_ETM55_Prescl;   //!
  TBranch        *b_L1_DoubleEG_20_10_1LegIso_Prescl;   //!
  TBranch        *b_L1_DoubleEG_22_10_Prescl;   //!
  TBranch        *b_L1_DoubleEG_15_10_Prescl;   //!
  TBranch        *b_L1_TripleEG_14_10_8_Prescl;   //!
  TBranch        *b_L1_SingleJet12_Prescl;   //!
  TBranch        *b_L1_TripleMu_5_5_3_Prescl;   //!
  TBranch        *b_L1_TripleMu0_Prescl;   //!
  TBranch        *b_L1_DoubleMuOpen_Prescl;   //!
  TBranch        *b_L1_ETT90_Prescl;   //!
  TBranch        *b_L1_ETT60_Prescl;   //!
  TBranch        *b_L1_QuadJetC36_TauJet52_Prescl;   //!
  TBranch        *b_L1_DoubleEG6_HTT150_Prescl;   //!
  TBranch        *b_L1_Mu5_DoubleEG5_Prescl;   //!
  TBranch        *b_L1_DoubleMu6_EG6_Prescl;   //!
  TBranch        *b_L1_SingleMuOpen_NotBptxOR_Prescl;   //!
  TBranch        *b_L1_Mu4_EG18_Prescl;   //!
  TBranch        *b_L1_Mu8_HTT125_Prescl;   //!
  TBranch        *b_L1_SingleMu16_Eta2p1_Prescl;   //!
  TBranch        *b_L1_DoubleMu7_EG7_Prescl;   //!
  TBranch        *b_L1_Mu14er_ETM30_Prescl;   //!
  TBranch        *b_L1_Mu10er_ETM50_Prescl;   //!
  TBranch        *b_L1_Mu6_HTT150_Prescl;   //!
  TBranch        *b_L1_Mu20_EG8_Prescl;   //!
  TBranch        *b_L1_HTT250_Prescl;   //!
  TBranch        *b_L1_ETM40_Prescl;   //!
  TBranch        *b_L1_SingleJetC32_NotBptxOR_Prescl;   //!
  TBranch        *b_L1_Mu6_DoubleEG10_Prescl;   //!
  TBranch        *b_L1_Mu5_IsoEG18_Prescl;   //!
  TBranch        *b_L1_Mu5_EG20_Prescl;   //!
  TBranch        *b_L1_Mu20_EG10_Prescl;   //!
  TBranch        *b_L1_HTT200_Prescl;   //!
  TBranch        *b_L1_HTT175_Prescl;   //!
  TBranch        *b_L1_HTT150_Prescl;   //!
  TBranch        *b_L1_HTT125_Prescl;   //!
  TBranch        *b_L1_ETM100_Prescl;   //!
  TBranch        *b_L1_ETM70_Prescl;   //!
  TBranch        *b_L1_ETM50_Prescl;   //!
  TBranch        *b_L1_ETM30_Prescl;   //!
  TBranch        *b_L1_SingleMu30_Prescl;   //!
  TBranch        *b_L1_SingleMu25_Prescl;   //!
  TBranch        *b_L1_SingleMu25er_Prescl;   //!
  TBranch        *b_L1_SingleMu20_Prescl;   //!
  TBranch        *b_L1_SingleMu12_Prescl;   //!
  TBranch        *b_L1_SingleMu20er_Prescl;   //!
  TBranch        *b_L1_ETT40_Prescl;   //!
  TBranch        *b_L1_SingleMu5_Prescl;   //!
  TBranch        *b_L1_SingleEG15_Prescl;   //!
  TBranch        *b_L1_SingleMu16_Prescl;   //!
  TBranch        *b_L1_SingleMuOpen_Prescl;   //!
  TBranch        *b_L1_SingleEG35_Prescl;   //!
  TBranch        *b_L1_SingleEG30_Prescl;   //!
  TBranch        *b_L1_SingleEG20_Prescl;   //!
  TBranch        *b_L1_SingleIsoEG20er_Prescl;   //!
  TBranch        *b_L1_SingleIsoEG18_Prescl;   //!
  TBranch        *b_L1_SingleEG40_Prescl;   //!
  TBranch        *b_L1_SingleEG25_Prescl;   //!
  TBranch        *b_L1_SingleEG5_Prescl;   //!
  TBranch        *b_L1_QuadJetC40_Prescl;   //!
  TBranch        *b_L1_DoubleMu_10_3p5_Prescl;   //!
  TBranch        *b_L1_DoubleMu_10_Open_Prescl;   //!
  TBranch        *b_L1_DoubleJetC112_Prescl;   //!
  TBranch        *b_L1_SingleMu14_Eta2p1_Prescl;   //!
  TBranch        *b_L1_DoubleJetC84_Prescl;   //!
  TBranch        *b_L1_DoubleJetC52_Prescl;   //!
  TBranch        *b_L1_SingleJet240_Prescl;   //!
  TBranch        *b_L1_SingleIsoEG22er_Prescl;   //!
  TBranch        *b_L1_SingleEG10_Prescl;   //!
  TBranch        *b_L1_SingleIsoEG30er_Prescl;   //!
  TBranch        *b_L1_SingleIsoEG28er_Prescl;   //!
  TBranch        *b_L1_SingleIsoEG25_Prescl;   //!
  TBranch        *b_L1_SingleIsoEG25er_Prescl;   //!
  TBranch        *b_L1_SingleEG35er_Prescl;   //!
  TBranch        *b_L1_EG25er_HTT125_Prescl;   //!
  TBranch        *b_L1_Mu3_JetC52_WdEtaPhi2_Prescl;   //!
  TBranch        *b_L1_Mu3_JetC16_WdEtaPhi2_Prescl;   //!
  TBranch        *b_L1_ETT15_Prescl;   //!
  TBranch        *b_L1_SingleMu30er_Prescl;   //!
  TBranch        *b_L1_DoubleMu0_Prescl;   //!
  TBranch        *b_L1_DoubleTauJet44er_Prescl;   //!
  TBranch        *b_L1_DoubleTauJet36er_Prescl;   //!
  TBranch        *b_L1_SingleJet36_Prescl;   //!
  TBranch        *b_L1_SingleJet200_Prescl;   //!
  TBranch        *b_L1_SingleJet176_Prescl;   //!
  TBranch        *b_L1_SingleJet128_Prescl;   //!
  TBranch        *b_L1_SingleJet92_Prescl;   //!
  TBranch        *b_L1_SingleJet68_Prescl;   //!
  TBranch        *b_L1_SingleJet52_Prescl;   //!
  TBranch        *b_L1_DoubleJetC120_Prescl;   //!
  TBranch        *b_L1_DoubleJetC72_Prescl;   //!
  TBranch        *b_L1_QuadJetC84_Prescl;   //!
  TBranch        *b_L1_Mu16er_TauJet20er_Prescl;   //!
  TBranch        *b_L1_IsoEG20er_TauJet20er_NotWdEta0_Prescl;   //!
  TBranch        *b_L1_DoubleTauJet40er_Prescl;   //!
  TBranch        *b_L1_Mu5_EG15_Prescl;   //!
  TBranch        *b_L1_Mu12_EG10_Prescl;   //!
  TBranch        *b_L1_Mu16er_TauJet40erORCenJet72er_Prescl;   //!
  TBranch        *b_L1_MinimumBiasHF2_OR_Prescl;   //!
  TBranch        *b_L1_MinimumBiasHF2_AND_Prescl;   //!
  TBranch        *b_L1_MinimumBiasHF1_OR_Prescl;   //!
  TBranch        *b_L1_MinimumBiasHF1_AND_v1_Prescl;   //!
  TBranch        *b_L1_SingleJet16_Prescl;   //!
  TBranch        *b_L1_SingleEG2_Prescl;   //!
  TBranch        *b_L1_AlwaysTrue_Prescl;   //!
  TBranch        *b_L1_ZeroBias_Prescl;   //!

   // Autogenerated from ConfDB - Prescale TBranch




   OHltTree(TTree *tree=0, OHltMenu *menu=0);
   
   virtual ~OHltTree();
   
   virtual Bool_t Notify();
   
   virtual void Init(TTree *tree);

   inline Int_t GetEntry(Long64_t entry);
   
   inline Long64_t LoadTree(Long64_t entry);
   
   inline void SetMapL1BitOfStandardHLTPath(OHltMenu *menu);
   
   inline void SetMapL1SeedsOfStandardHLTPath(OHltMenu *menu);
   
   inline void SetMapL1BitOfStandardHLTPathUsingLogicParser(
         OHltMenu *menu,
         int nentry);
   
   inline void ApplyL1Prescales(
         OHltMenu *menu,
         OHltConfig *cfg,
         OHltRateCounter *rc);
   
   inline void RemoveEGOverlaps();
   
   inline void SetL1MuonQuality();
   
   inline void SetOpenL1Bits();
   
   bool passPreFilterLogicParser(TString, int);

   void Loop(
         OHltRateCounter *rc,
         OHltConfig *cfg,
         OHltMenu *menu,
         int pID,
         double &Den,
         TH1F* &h1,
         TH1F* &h2,
         TH1F* &h3,
         TH1F* &h4,
         SampleDiagnostics& primaryDatasetsDiagnostics);

   

   int readRefPrescaleFromFile(TString st);

   std::map<TString, std::vector<TString> >& GetL1SeedsOfHLTPathMap()
   {
      return map_L1SeedsOfStandardHLTPath;
   }
   // mapping to all seeds

   int GetNLumiSections()
   {
      return nLumiSections;
   }


private:

   int nTrig;
   int nL1Trig;
   int nLumiSections;
   int previousLumiSection;
   int currentLumiSection;
   int nEventsProcessed;
   std::vector<int> triggerBit;
   std::vector<int> previousBitsFired;
   std::vector<int> allOtherBitsFired;
   std::vector<int> BitOfStandardHLTPath;

   std::map<TString,int> map_BitOfStandardHLTPath;
   std::map<TString,int> map_L1BitOfStandardHLTPath;
   std::map<TString,int> map_RefPrescaleOfStandardHLTPath;

   std::map<TString, std::vector<TString> > map_L1SeedsOfStandardHLTPath; // mapping to all seeds
   std::map<TString, std::vector<int> > map_RpnTokenIdOfStandardHLTPath; // mapping to algo token


   TRandom3 random; // for random prescale method
   
   inline int GetIntRandom()
   {
      return (int)(9999999.*random.Rndm());
   }
   
   inline int GetFloatRandom()
   {
      return (9999999.*random.Rndm());
   }

   bool prescaleResponse(
         OHltMenu *menu,
         OHltConfig *cfg,
         OHltRateCounter *rc,
         int i);
   
   bool prescaleResponseL1(
         OHltMenu *menu,
         OHltConfig *cfg,
         OHltRateCounter *rc,
         int i);
   
   bool isInRunLumiblockList(int, int, std::vector < std::vector <int> >);

   int nMissingTriggerWarnings;

   enum e_objType {
      muon,
      electron,
      tau,
      photon,
      jet};
};


#ifdef OHltTree_cxx

OHltTree::OHltTree(TTree *tree, OHltMenu *menu)
{
   random.SetSeed(0);

   std::cout<<"Initialising OHltTree."<<std::endl;
   if (tree == 0)
   {
      std::cerr<<"Error initialising tree!"<<std::endl;
      return;
   }
   if (menu == 0)
   {
      std::cerr<<"Error: no menu!"<<std::endl;
      return;
   }
   Init(tree);

   nMissingTriggerWarnings = 0;

   currentLumiSection = -999;
   previousLumiSection = -999;
   nLumiSections = 0;

   nTrig = menu->GetTriggerSize();
   nL1Trig = menu->GetL1TriggerSize();

   triggerBit.reserve(nTrig);
   previousBitsFired.reserve(nTrig);
   allOtherBitsFired.reserve(nTrig);
   BitOfStandardHLTPath.reserve(nTrig);

   for (int it = 0; it < nTrig; it++)
   {
      triggerBit.push_back(false);
      previousBitsFired.push_back(false);
      allOtherBitsFired.push_back(false);
   }
   std::cout<<"Succeeded initialising OHltTree. nEntries: "<<fChain->GetEntries()<<std::endl;

}


OHltTree::~OHltTree()
{
   if (!fChain) return;
   delete fChain->GetCurrentFile();
}

Int_t OHltTree::GetEntry(Long64_t entry)
{
   // Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}

Long64_t OHltTree::LoadTree(Long64_t entry)
{
   // Set the environment to read one entry
   if (!fChain) return -5;
   Long64_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (!fChain->InheritsFrom(TChain::Class())) return centry;
   TChain *chain = (TChain*)fChain;
   if (chain->GetTreeNumber() != fCurrent)
   {
      fCurrent = chain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void OHltTree::Init(TTree *tree)
{
   // The Init() function is called when the selector needs to initialize
   // a new tree or chain. Typically here the branch addresses and branch
   // pointers of the tree will be set.
   // It is normally not necessary to make changes to the generated
   // code, but the routine can be extended by the user if needed.
   // Init() will be called many times when running on PROOF
   // (once per file to be processed).

   // Set branch addresses and branch pointers
   if (!tree) return;
   fChain = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   fChain->SetBranchAddress("NrecoJetCal", &NrecoJetCal, &b_NrecoJetCal);
   fChain->SetBranchAddress("NrecoJetCorCal", &NrecoJetCorCal, &b_NrecoJetCorCal);

   fChain->SetBranchAddress("NrecoJetGen", &NrecoJetGen, &b_NrecoJetGen);
   fChain->SetBranchAddress("NrecoTowCal", &NrecoTowCal, &b_NrecoTowCal);

   fChain->SetBranchAddress("recoJetCalPt", recoJetCalPt, &b_recoJetCalPt);
   fChain->SetBranchAddress("recoJetCalPhi", recoJetCalPhi, &b_recoJetCalPhi);
   fChain->SetBranchAddress("recoJetCalEta", recoJetCalEta, &b_recoJetCalEta);
   fChain->SetBranchAddress("recoJetCalE", recoJetCalE, &b_recoJetCalE);
   fChain->SetBranchAddress("recoJetCalEMF", recoJetCalEMF, &b_recoJetCalEMF);
   fChain->SetBranchAddress("recoJetCalN90", recoJetCalN90, &b_recoJetCalN90);
   fChain->SetBranchAddress("recoJetCalN90hits", recoJetCalN90hits, &b_recoJetCalN90hits);

   fChain->SetBranchAddress("recoJetCorCalPt", recoJetCorCalPt, &b_recoJetCorCalPt);
   fChain->SetBranchAddress("recoJetCorCalPhi", recoJetCorCalPhi, &b_recoJetCorCalPhi);
   fChain->SetBranchAddress("recoJetCorCalEta", recoJetCorCalEta, &b_recoJetCorCalEta);
   fChain->SetBranchAddress("recoJetCorCalE", recoJetCorCalE, &b_recoJetCorCalE);
   fChain->SetBranchAddress("recoJetCorCalEMF", recoJetCorCalEMF, &b_recoJetCorCalEMF);
   fChain->SetBranchAddress("recoJetCorCalN90", recoJetCorCalN90, &b_recoJetCorCalN90);
   fChain->SetBranchAddress("recoJetCorCalN90hits", recoJetCorCalN90hits, &b_recoJetCorCalN90hits);

   fChain->SetBranchAddress("recoJetGenPt", &recoJetGenPt, &b_recoJetGenPt);
   fChain->SetBranchAddress("recoJetGenPhi", &recoJetGenPhi, &b_recoJetGenPhi);
   fChain->SetBranchAddress("recoJetGenEta", &recoJetGenEta, &b_recoJetGenEta);
   fChain->SetBranchAddress("recoJetGenEt", &recoJetGenEt, &b_recoJetGenEt);
   fChain->SetBranchAddress("recoJetGenE", &recoJetGenE, &b_recoJetGenE);
   fChain->SetBranchAddress("recoTowEt", &recoTowEt, &b_recoTowEt);
   fChain->SetBranchAddress("recoTowEta", &recoTowEta, &b_recoTowEta);
   fChain->SetBranchAddress("recoTowPhi", &recoTowPhi, &b_recoTowPhi);
   fChain->SetBranchAddress("recoTowE", &recoTowE, &b_recoTowE);
   fChain->SetBranchAddress("recoTowEm", &recoTowEm, &b_recoTowEm);
   fChain->SetBranchAddress("recoTowHad", &recoTowHad, &b_recoTowHad);
   fChain->SetBranchAddress("recoTowOE", &recoTowOE, &b_recoTowOE);

   fChain->SetBranchAddress("recoMetCal", &recoMetCal, &b_recoMetCal);
   fChain->SetBranchAddress("recoMetCalPhi", &recoMetCalPhi, &b_recoMetCalPhi);
   fChain->SetBranchAddress("recoMetCalSum", &recoMetCalSum, &b_recoMetCalSum);
   fChain->SetBranchAddress("recoMetGen", &recoMetGen, &b_recoMetGen);
   fChain->SetBranchAddress("recoMetGenPhi", &recoMetGenPhi, &b_recoMetGenPhi);
   fChain->SetBranchAddress("recoMetGenSum", &recoMetGenSum, &b_recoMetGenSum);
   fChain->SetBranchAddress("recoHTCal", &recoHTCal, &b_recoHTCal);
   fChain->SetBranchAddress("recoHTCalPhi", &recoHTCalPhi, &b_recoHTCalPhi);
   fChain->SetBranchAddress("recoHTCalSum", &recoHTCalSum, &b_recoHTCalSum);
   fChain->SetBranchAddress("NPUgenBX0", &genNVrt, &b_genNVrt);
   fChain->SetBranchAddress("recoNVrtOffline0", &recoNVrt, &b_recoNVrt);
   fChain->SetBranchAddress("recoVrtXOffline0", &recoVrtX, &b_recoVrtX);
   fChain->SetBranchAddress("recoVrtYOffline0", &recoVrtY, &b_recoVrtY);
   fChain->SetBranchAddress("recoVrtZOffline0", &recoVrtZ, &b_recoVrtZ);
   fChain->SetBranchAddress("recoVrtNtrkOffline0", &recoVrtNtrk, &b_recoVrtNtrk);
   fChain->SetBranchAddress("recoVrtChi2Offline0", &recoVrtChi2, &b_recoVrtChi2);
   fChain->SetBranchAddress("recoVrtNdofOffline0", &recoVrtNdof, &b_recoVrtNdof);

   fChain->SetBranchAddress("NrecoElec", &NrecoElec, &b_NrecoElec);
   fChain->SetBranchAddress("recoElecPt", &recoElecPt, &b_recoElecPt);
   fChain->SetBranchAddress("recoElecPhi", &recoElecPhi, &b_recoElecPhi);
   fChain->SetBranchAddress("recoElecEta", &recoElecEta, &b_recoElecEta);
   fChain->SetBranchAddress("recoElecEt", &recoElecEt, &b_recoElecEt);
   fChain->SetBranchAddress("recoElecE", &recoElecE, &b_recoElecE);
   fChain->SetBranchAddress("NrecoPhot", &NrecoPhot, &b_NrecoPhot);
   fChain->SetBranchAddress("recoPhotPt", &recoPhotPt, &b_recoPhotPt);
   fChain->SetBranchAddress("recoPhotPhi", &recoPhotPhi, &b_recoPhotPhi);
   fChain->SetBranchAddress("recoPhotEta", &recoPhotEta, &b_recoPhotEta);
   fChain->SetBranchAddress("recoPhotEt", &recoPhotEt, &b_recoPhotEt);
   fChain->SetBranchAddress("recoPhotE", &recoPhotE, &b_recoPhotE);
	
   fChain->SetBranchAddress("NrecoMuon", &NrecoMuon, &b_NrecoMuon);
   fChain->SetBranchAddress("recoMuonPt", &recoMuonPt, &b_recoMuonPt);
   fChain->SetBranchAddress("recoMuonPhi", &recoMuonPhi, &b_recoMuonPhi);
   fChain->SetBranchAddress("recoMuonEta", &recoMuonEta, &b_recoMuonEta);
   fChain->SetBranchAddress("recoMuonEt", &recoMuonEt, &b_recoMuonEt);
   fChain->SetBranchAddress("recoMuonE", &recoMuonE, &b_recoMuonE);

   fChain->SetBranchAddress("NMCpart", &NMCpart, &b_NMCpart);
   fChain->SetBranchAddress("MCpid", MCpid, &b_MCpid);
   fChain->SetBranchAddress("MCstatus", MCstatus, &b_MCstatus);
   fChain->SetBranchAddress("MCvtxX", MCvtxX, &b_MCvtxX);
   fChain->SetBranchAddress("MCvtxY", MCvtxY, &b_MCvtxY);
   fChain->SetBranchAddress("MCvtxZ", MCvtxZ, &b_MCvtxZ);
   fChain->SetBranchAddress("MCpt", MCpt, &b_MCpt);
   fChain->SetBranchAddress("MCeta", MCeta, &b_MCeta);
   fChain->SetBranchAddress("MCphi", MCphi, &b_MCphi);
   fChain->SetBranchAddress("MCPtHat", &MCPtHat, &b_MCPtHat);
   fChain->SetBranchAddress("MCWeight", &MCWeight, &b_MCWeight);
   fChain->SetBranchAddress("MCWeightSign", &MCWeightSign, &b_MCWeightSign);
   fChain->SetBranchAddress("MCmu3", &MCmu3, &b_MCmu3);
   fChain->SetBranchAddress("MCel3", &MCel3, &b_MCel3);
   fChain->SetBranchAddress("MCbb", &MCbb, &b_MCbb);
   fChain->SetBranchAddress("MCab", &MCab, &b_MCab);
   fChain->SetBranchAddress("MCWenu", &MCWenu, &b_MCWenu);
   fChain->SetBranchAddress("MCWmunu", &MCWmunu, &b_MCmunu);
   fChain->SetBranchAddress("MCZee", &MCZee, &b_MCZee);
   fChain->SetBranchAddress("MCZmumu", &MCZmumu, &b_MCZmumu);
   fChain->SetBranchAddress("MCptEleMax", &MCptEleMax, &b_MCptEleMax);
   fChain->SetBranchAddress("MCptMuMax", &MCptMuMax, &b_MCptMuMax);
   fChain->SetBranchAddress("Run", &Run, &b_Run);
   fChain->SetBranchAddress("Event", &Event, &b_Event);
   fChain->SetBranchAddress("LumiBlock", &LumiBlock, &b_LumiBlock);
   fChain->SetBranchAddress("Bx", &Bx, &b_Bx);
   fChain->SetBranchAddress("Orbit", &Orbit, &b_Orbit);
   fChain->SetBranchAddress("AvgInstDelLumi", &AvgInstDelLumi, &b_AvgInstDelLumi);

   // Autogenerated L1 - SetBranchAddressBits 
  fChain->SetBranchAddress("L1Tech_CASTOR_HaloMuon.v0", &L1Tech_CASTOR_HaloMuonv0, &b_L1Tech_CASTOR_HaloMuonv0);
  fChain->SetBranchAddress("L1Tech_CASTOR_MediumJet.v0", &L1Tech_CASTOR_MediumJetv0, &b_L1Tech_CASTOR_MediumJetv0);
  fChain->SetBranchAddress("L1Tech_CASTOR_HighJet.v0", &L1Tech_CASTOR_HighJetv0, &b_L1Tech_CASTOR_HighJetv0);
  fChain->SetBranchAddress("L1Tech_CASTOR_Gap.v0", &L1Tech_CASTOR_Gapv0, &b_L1Tech_CASTOR_Gapv0);
  fChain->SetBranchAddress("L1Tech_TOTEM_3", &L1Tech_TOTEM_3, &b_L1Tech_TOTEM_3);
  fChain->SetBranchAddress("L1Tech_TOTEM_2", &L1Tech_TOTEM_2, &b_L1Tech_TOTEM_2);
  fChain->SetBranchAddress("L1Tech_TOTEM_1", &L1Tech_TOTEM_1, &b_L1Tech_TOTEM_1);
  fChain->SetBranchAddress("L1Tech_TOTEM_0", &L1Tech_TOTEM_0, &b_L1Tech_TOTEM_0);
  fChain->SetBranchAddress("L1Tech__TTU_RB0_Cosmics.v0", &L1Tech__TTU_RB0_Cosmicsv0, &b_L1Tech__TTU_RB0_Cosmicsv0);
  fChain->SetBranchAddress("L1Tech_RPC_TTU_RBplus1_Cosmics.v0", &L1Tech_RPC_TTU_RBplus1_Cosmicsv0, &b_L1Tech_RPC_TTU_RBplus1_Cosmicsv0);
  fChain->SetBranchAddress("L1Tech_RPC_TTU_RBplus2_Cosmics.v0", &L1Tech_RPC_TTU_RBplus2_Cosmicsv0, &b_L1Tech_RPC_TTU_RBplus2_Cosmicsv0);
  fChain->SetBranchAddress("L1Tech_RPC_TTU_pointing_Cosmics.v0", &L1Tech_RPC_TTU_pointing_Cosmicsv0, &b_L1Tech_RPC_TTU_pointing_Cosmicsv0);
  fChain->SetBranchAddress("L1Tech_RPC_TTU_barrel_Cosmics.v0", &L1Tech_RPC_TTU_barrel_Cosmicsv0, &b_L1Tech_RPC_TTU_barrel_Cosmicsv0);
  fChain->SetBranchAddress("L1Tech_DT_GlobalOR.v0", &L1Tech_DT_GlobalORv0, &b_L1Tech_DT_GlobalORv0);
  fChain->SetBranchAddress("L1Tech_BPTX_PreBPTX.v0", &L1Tech_BPTX_PreBPTXv0, &b_L1Tech_BPTX_PreBPTXv0);
  fChain->SetBranchAddress("L1Tech_HCAL_HBHE_totalOR.v0", &L1Tech_HCAL_HBHE_totalORv0, &b_L1Tech_HCAL_HBHE_totalORv0);
  fChain->SetBranchAddress("L1Tech_HCAL_HO_totalOR.v0", &L1Tech_HCAL_HO_totalORv0, &b_L1Tech_HCAL_HO_totalORv0);
  fChain->SetBranchAddress("L1Tech_HCAL_HF_MMP_or_MPP.v1", &L1Tech_HCAL_HF_MMP_or_MPPv1, &b_L1Tech_HCAL_HF_MMP_or_MPPv1);
  fChain->SetBranchAddress("L1Tech_HCAL_HF_coincidence_PM.v2", &L1Tech_HCAL_HF_coincidence_PMv2, &b_L1Tech_HCAL_HF_coincidence_PMv2);
  fChain->SetBranchAddress("L1Tech_HCAL_HF_single_channel.v0", &L1Tech_HCAL_HF_single_channelv0, &b_L1Tech_HCAL_HF_single_channelv0);
  fChain->SetBranchAddress("L1Tech_BPTX_quiet.v0", &L1Tech_BPTX_quietv0, &b_L1Tech_BPTX_quietv0);
  fChain->SetBranchAddress("L1Tech_BPTX_minus_AND_not_plus.v0", &L1Tech_BPTX_minus_AND_not_plusv0, &b_L1Tech_BPTX_minus_AND_not_plusv0);
  fChain->SetBranchAddress("L1Tech_BPTX_plus_AND_NOT_minus.v0", &L1Tech_BPTX_plus_AND_NOT_minusv0, &b_L1Tech_BPTX_plus_AND_NOT_minusv0);
  fChain->SetBranchAddress("L1Tech_BPTX_plus_AND_minus_instance1.v0", &L1Tech_BPTX_plus_AND_minus_instance1v0, &b_L1Tech_BPTX_plus_AND_minus_instance1v0);
  fChain->SetBranchAddress("L1Tech_BPTX_plus_OR_minus.v0", &L1Tech_BPTX_plus_OR_minusv0, &b_L1Tech_BPTX_plus_OR_minusv0);
  fChain->SetBranchAddress("L1Tech_BPTX_minus.v0", &L1Tech_BPTX_minusv0, &b_L1Tech_BPTX_minusv0);
  fChain->SetBranchAddress("L1Tech_BPTX_plus.v0", &L1Tech_BPTX_plusv0, &b_L1Tech_BPTX_plusv0);
  fChain->SetBranchAddress("L1Tech_BPTX_plus_AND_minus.v0", &L1Tech_BPTX_plus_AND_minusv0, &b_L1Tech_BPTX_plus_AND_minusv0);
  fChain->SetBranchAddress("L1_SingleMuBeamHalo", &L1_SingleMuBeamHalo, &b_L1_SingleMuBeamHalo);
  fChain->SetBranchAddress("L1_DoubleMu_10_0_WdEta18", &L1_DoubleMu_10_0_WdEta18, &b_L1_DoubleMu_10_0_WdEta18);
  fChain->SetBranchAddress("L1_DoubleMu_12_5", &L1_DoubleMu_12_5, &b_L1_DoubleMu_12_5);
  fChain->SetBranchAddress("L1_DoubleMu0_Eta1p6_WdEta18_OS", &L1_DoubleMu0_Eta1p6_WdEta18_OS, &b_L1_DoubleMu0_Eta1p6_WdEta18_OS);
  fChain->SetBranchAddress("L1_SingleMu18er", &L1_SingleMu18er, &b_L1_SingleMu18er);
  fChain->SetBranchAddress("L1_QuadMu0", &L1_QuadMu0, &b_L1_QuadMu0);
  fChain->SetBranchAddress("L1_TripleJet_92_76_64", &L1_TripleJet_92_76_64, &b_L1_TripleJet_92_76_64);
  fChain->SetBranchAddress("L1_RomanPotsAND", &L1_RomanPotsAND, &b_L1_RomanPotsAND);
  fChain->SetBranchAddress("L1_ETT130", &L1_ETT130, &b_L1_ETT130);
  fChain->SetBranchAddress("L1_ETM70_NotJet52WdPhi2", &L1_ETM70_NotJet52WdPhi2, &b_L1_ETM70_NotJet52WdPhi2);
  fChain->SetBranchAddress("L1_ETM60_NotJet52WdPhi2", &L1_ETM60_NotJet52WdPhi2, &b_L1_ETM60_NotJet52WdPhi2);
  fChain->SetBranchAddress("L1_DoubleMu0_Eta1p6_WdEta18", &L1_DoubleMu0_Eta1p6_WdEta18, &b_L1_DoubleMu0_Eta1p6_WdEta18);
  fChain->SetBranchAddress("L1_DoubleJetC56_ETM60", &L1_DoubleJetC56_ETM60, &b_L1_DoubleJetC56_ETM60);
  fChain->SetBranchAddress("L1_SingleJetC20_NotBptxOR", &L1_SingleJetC20_NotBptxOR, &b_L1_SingleJetC20_NotBptxOR);
  fChain->SetBranchAddress("L1_QuadJetC60", &L1_QuadJetC60, &b_L1_QuadJetC60);
  fChain->SetBranchAddress("L1_DoubleJetC100", &L1_DoubleJetC100, &b_L1_DoubleJetC100);
  fChain->SetBranchAddress("L1_ETM60", &L1_ETM60, &b_L1_ETM60);
  fChain->SetBranchAddress("L1_Jet32_MuOpen_EG10_MuEGNotWdPhi3_JetMuWdPhi1", &L1_Jet32_MuOpen_EG10_MuEGNotWdPhi3_JetMuWdPhi1, &b_L1_Jet32_MuOpen_EG10_MuEGNotWdPhi3_JetMuWdPhi1);
  fChain->SetBranchAddress("L1_Jet32_DoubleMu_Open_10_MuMuNotWdPhi23_JetMuWdPhi1", &L1_Jet32_DoubleMu_Open_10_MuMuNotWdPhi23_JetMuWdPhi1, &b_L1_Jet32_DoubleMu_Open_10_MuMuNotWdPhi23_JetMuWdPhi1);
  fChain->SetBranchAddress("L1_DoubleJetC32_WdPhi7_HTT125", &L1_DoubleJetC32_WdPhi7_HTT125, &b_L1_DoubleJetC32_WdPhi7_HTT125);
  fChain->SetBranchAddress("L1_DoubleJetC60_ETM60", &L1_DoubleJetC60_ETM60, &b_L1_DoubleJetC60_ETM60);
  fChain->SetBranchAddress("L1_Mu0er_ETM55", &L1_Mu0er_ETM55, &b_L1_Mu0er_ETM55);
  fChain->SetBranchAddress("L1_DoubleEG_20_10_1LegIso", &L1_DoubleEG_20_10_1LegIso, &b_L1_DoubleEG_20_10_1LegIso);
  fChain->SetBranchAddress("L1_DoubleEG_22_10", &L1_DoubleEG_22_10, &b_L1_DoubleEG_22_10);
  fChain->SetBranchAddress("L1_DoubleEG_15_10", &L1_DoubleEG_15_10, &b_L1_DoubleEG_15_10);
  fChain->SetBranchAddress("L1_TripleEG_14_10_8", &L1_TripleEG_14_10_8, &b_L1_TripleEG_14_10_8);
  fChain->SetBranchAddress("L1_SingleJet12", &L1_SingleJet12, &b_L1_SingleJet12);
  fChain->SetBranchAddress("L1_TripleMu_5_5_3", &L1_TripleMu_5_5_3, &b_L1_TripleMu_5_5_3);
  fChain->SetBranchAddress("L1_TripleMu0", &L1_TripleMu0, &b_L1_TripleMu0);
  fChain->SetBranchAddress("L1_DoubleMuOpen", &L1_DoubleMuOpen, &b_L1_DoubleMuOpen);
  fChain->SetBranchAddress("L1_ETT90", &L1_ETT90, &b_L1_ETT90);
  fChain->SetBranchAddress("L1_ETT60", &L1_ETT60, &b_L1_ETT60);
  fChain->SetBranchAddress("L1_QuadJetC36_TauJet52", &L1_QuadJetC36_TauJet52, &b_L1_QuadJetC36_TauJet52);
  fChain->SetBranchAddress("L1_DoubleEG6_HTT150", &L1_DoubleEG6_HTT150, &b_L1_DoubleEG6_HTT150);
  fChain->SetBranchAddress("L1_Mu5_DoubleEG5", &L1_Mu5_DoubleEG5, &b_L1_Mu5_DoubleEG5);
  fChain->SetBranchAddress("L1_DoubleMu6_EG6", &L1_DoubleMu6_EG6, &b_L1_DoubleMu6_EG6);
  fChain->SetBranchAddress("L1_SingleMuOpen_NotBptxOR", &L1_SingleMuOpen_NotBptxOR, &b_L1_SingleMuOpen_NotBptxOR);
  fChain->SetBranchAddress("L1_Mu4_EG18", &L1_Mu4_EG18, &b_L1_Mu4_EG18);
  fChain->SetBranchAddress("L1_Mu8_HTT125", &L1_Mu8_HTT125, &b_L1_Mu8_HTT125);
  fChain->SetBranchAddress("L1_SingleMu16_Eta2p1", &L1_SingleMu16_Eta2p1, &b_L1_SingleMu16_Eta2p1);
  fChain->SetBranchAddress("L1_DoubleMu7_EG7", &L1_DoubleMu7_EG7, &b_L1_DoubleMu7_EG7);
  fChain->SetBranchAddress("L1_Mu14er_ETM30", &L1_Mu14er_ETM30, &b_L1_Mu14er_ETM30);
  fChain->SetBranchAddress("L1_Mu10er_ETM50", &L1_Mu10er_ETM50, &b_L1_Mu10er_ETM50);
  fChain->SetBranchAddress("L1_Mu6_HTT150", &L1_Mu6_HTT150, &b_L1_Mu6_HTT150);
  fChain->SetBranchAddress("L1_Mu20_EG8", &L1_Mu20_EG8, &b_L1_Mu20_EG8);
  fChain->SetBranchAddress("L1_HTT250", &L1_HTT250, &b_L1_HTT250);
  fChain->SetBranchAddress("L1_ETM40", &L1_ETM40, &b_L1_ETM40);
  fChain->SetBranchAddress("L1_SingleJetC32_NotBptxOR", &L1_SingleJetC32_NotBptxOR, &b_L1_SingleJetC32_NotBptxOR);
  fChain->SetBranchAddress("L1_Mu6_DoubleEG10", &L1_Mu6_DoubleEG10, &b_L1_Mu6_DoubleEG10);
  fChain->SetBranchAddress("L1_Mu5_IsoEG18", &L1_Mu5_IsoEG18, &b_L1_Mu5_IsoEG18);
  fChain->SetBranchAddress("L1_Mu5_EG20", &L1_Mu5_EG20, &b_L1_Mu5_EG20);
  fChain->SetBranchAddress("L1_Mu20_EG10", &L1_Mu20_EG10, &b_L1_Mu20_EG10);
  fChain->SetBranchAddress("L1_HTT200", &L1_HTT200, &b_L1_HTT200);
  fChain->SetBranchAddress("L1_HTT175", &L1_HTT175, &b_L1_HTT175);
  fChain->SetBranchAddress("L1_HTT150", &L1_HTT150, &b_L1_HTT150);
  fChain->SetBranchAddress("L1_HTT125", &L1_HTT125, &b_L1_HTT125);
  fChain->SetBranchAddress("L1_ETM100", &L1_ETM100, &b_L1_ETM100);
  fChain->SetBranchAddress("L1_ETM70", &L1_ETM70, &b_L1_ETM70);
  fChain->SetBranchAddress("L1_ETM50", &L1_ETM50, &b_L1_ETM50);
  fChain->SetBranchAddress("L1_ETM30", &L1_ETM30, &b_L1_ETM30);
  fChain->SetBranchAddress("L1_SingleMu30", &L1_SingleMu30, &b_L1_SingleMu30);
  fChain->SetBranchAddress("L1_SingleMu25", &L1_SingleMu25, &b_L1_SingleMu25);
  fChain->SetBranchAddress("L1_SingleMu25er", &L1_SingleMu25er, &b_L1_SingleMu25er);
  fChain->SetBranchAddress("L1_SingleMu20", &L1_SingleMu20, &b_L1_SingleMu20);
  fChain->SetBranchAddress("L1_SingleMu12", &L1_SingleMu12, &b_L1_SingleMu12);
  fChain->SetBranchAddress("L1_SingleMu20er", &L1_SingleMu20er, &b_L1_SingleMu20er);
  fChain->SetBranchAddress("L1_ETT40", &L1_ETT40, &b_L1_ETT40);
  fChain->SetBranchAddress("L1_SingleMu5", &L1_SingleMu5, &b_L1_SingleMu5);
  fChain->SetBranchAddress("L1_SingleEG15", &L1_SingleEG15, &b_L1_SingleEG15);
  fChain->SetBranchAddress("L1_SingleMu16", &L1_SingleMu16, &b_L1_SingleMu16);
  fChain->SetBranchAddress("L1_SingleMuOpen", &L1_SingleMuOpen, &b_L1_SingleMuOpen);
  fChain->SetBranchAddress("L1_SingleEG35", &L1_SingleEG35, &b_L1_SingleEG35);
  fChain->SetBranchAddress("L1_SingleEG30", &L1_SingleEG30, &b_L1_SingleEG30);
  fChain->SetBranchAddress("L1_SingleEG20", &L1_SingleEG20, &b_L1_SingleEG20);
  fChain->SetBranchAddress("L1_SingleIsoEG20er", &L1_SingleIsoEG20er, &b_L1_SingleIsoEG20er);
  fChain->SetBranchAddress("L1_SingleIsoEG18", &L1_SingleIsoEG18, &b_L1_SingleIsoEG18);
  fChain->SetBranchAddress("L1_SingleEG40", &L1_SingleEG40, &b_L1_SingleEG40);
  fChain->SetBranchAddress("L1_SingleEG25", &L1_SingleEG25, &b_L1_SingleEG25);
  fChain->SetBranchAddress("L1_SingleEG5", &L1_SingleEG5, &b_L1_SingleEG5);
  fChain->SetBranchAddress("L1_QuadJetC40", &L1_QuadJetC40, &b_L1_QuadJetC40);
  fChain->SetBranchAddress("L1_DoubleMu_10_3p5", &L1_DoubleMu_10_3p5, &b_L1_DoubleMu_10_3p5);
  fChain->SetBranchAddress("L1_DoubleMu_10_Open", &L1_DoubleMu_10_Open, &b_L1_DoubleMu_10_Open);
  fChain->SetBranchAddress("L1_DoubleJetC112", &L1_DoubleJetC112, &b_L1_DoubleJetC112);
  fChain->SetBranchAddress("L1_SingleMu14_Eta2p1", &L1_SingleMu14_Eta2p1, &b_L1_SingleMu14_Eta2p1);
  fChain->SetBranchAddress("L1_DoubleJetC84", &L1_DoubleJetC84, &b_L1_DoubleJetC84);
  fChain->SetBranchAddress("L1_DoubleJetC52", &L1_DoubleJetC52, &b_L1_DoubleJetC52);
  fChain->SetBranchAddress("L1_SingleJet240", &L1_SingleJet240, &b_L1_SingleJet240);
  fChain->SetBranchAddress("L1_SingleIsoEG22er", &L1_SingleIsoEG22er, &b_L1_SingleIsoEG22er);
  fChain->SetBranchAddress("L1_SingleEG10", &L1_SingleEG10, &b_L1_SingleEG10);
  fChain->SetBranchAddress("L1_SingleIsoEG30er", &L1_SingleIsoEG30er, &b_L1_SingleIsoEG30er);
  fChain->SetBranchAddress("L1_SingleIsoEG28er", &L1_SingleIsoEG28er, &b_L1_SingleIsoEG28er);
  fChain->SetBranchAddress("L1_SingleIsoEG25", &L1_SingleIsoEG25, &b_L1_SingleIsoEG25);
  fChain->SetBranchAddress("L1_SingleIsoEG25er", &L1_SingleIsoEG25er, &b_L1_SingleIsoEG25er);
  fChain->SetBranchAddress("L1_SingleEG35er", &L1_SingleEG35er, &b_L1_SingleEG35er);
  fChain->SetBranchAddress("L1_EG25er_HTT125", &L1_EG25er_HTT125, &b_L1_EG25er_HTT125);
  fChain->SetBranchAddress("L1_Mu3_JetC52_WdEtaPhi2", &L1_Mu3_JetC52_WdEtaPhi2, &b_L1_Mu3_JetC52_WdEtaPhi2);
  fChain->SetBranchAddress("L1_Mu3_JetC16_WdEtaPhi2", &L1_Mu3_JetC16_WdEtaPhi2, &b_L1_Mu3_JetC16_WdEtaPhi2);
  fChain->SetBranchAddress("L1_ETT15", &L1_ETT15, &b_L1_ETT15);
  fChain->SetBranchAddress("L1_SingleMu30er", &L1_SingleMu30er, &b_L1_SingleMu30er);
  fChain->SetBranchAddress("L1_DoubleMu0", &L1_DoubleMu0, &b_L1_DoubleMu0);
  fChain->SetBranchAddress("L1_DoubleTauJet44er", &L1_DoubleTauJet44er, &b_L1_DoubleTauJet44er);
  fChain->SetBranchAddress("L1_DoubleTauJet36er", &L1_DoubleTauJet36er, &b_L1_DoubleTauJet36er);
  fChain->SetBranchAddress("L1_SingleJet36", &L1_SingleJet36, &b_L1_SingleJet36);
  fChain->SetBranchAddress("L1_SingleJet200", &L1_SingleJet200, &b_L1_SingleJet200);
  fChain->SetBranchAddress("L1_SingleJet176", &L1_SingleJet176, &b_L1_SingleJet176);
  fChain->SetBranchAddress("L1_SingleJet128", &L1_SingleJet128, &b_L1_SingleJet128);
  fChain->SetBranchAddress("L1_SingleJet92", &L1_SingleJet92, &b_L1_SingleJet92);
  fChain->SetBranchAddress("L1_SingleJet68", &L1_SingleJet68, &b_L1_SingleJet68);
  fChain->SetBranchAddress("L1_SingleJet52", &L1_SingleJet52, &b_L1_SingleJet52);
  fChain->SetBranchAddress("L1_DoubleJetC120", &L1_DoubleJetC120, &b_L1_DoubleJetC120);
  fChain->SetBranchAddress("L1_DoubleJetC72", &L1_DoubleJetC72, &b_L1_DoubleJetC72);
  fChain->SetBranchAddress("L1_QuadJetC84", &L1_QuadJetC84, &b_L1_QuadJetC84);
  fChain->SetBranchAddress("L1_Mu16er_TauJet20er", &L1_Mu16er_TauJet20er, &b_L1_Mu16er_TauJet20er);
  fChain->SetBranchAddress("L1_IsoEG20er_TauJet20er_NotWdEta0", &L1_IsoEG20er_TauJet20er_NotWdEta0, &b_L1_IsoEG20er_TauJet20er_NotWdEta0);
  fChain->SetBranchAddress("L1_DoubleTauJet40er", &L1_DoubleTauJet40er, &b_L1_DoubleTauJet40er);
  fChain->SetBranchAddress("L1_Mu5_EG15", &L1_Mu5_EG15, &b_L1_Mu5_EG15);
  fChain->SetBranchAddress("L1_Mu12_EG10", &L1_Mu12_EG10, &b_L1_Mu12_EG10);
  fChain->SetBranchAddress("L1_Mu16er_TauJet40erORCenJet72er", &L1_Mu16er_TauJet40erORCenJet72er, &b_L1_Mu16er_TauJet40erORCenJet72er);
  fChain->SetBranchAddress("L1_MinimumBiasHF2_OR", &L1_MinimumBiasHF2_OR, &b_L1_MinimumBiasHF2_OR);
  fChain->SetBranchAddress("L1_MinimumBiasHF2_AND", &L1_MinimumBiasHF2_AND, &b_L1_MinimumBiasHF2_AND);
  fChain->SetBranchAddress("L1_MinimumBiasHF1_OR", &L1_MinimumBiasHF1_OR, &b_L1_MinimumBiasHF1_OR);
  fChain->SetBranchAddress("L1_MinimumBiasHF1_AND_v1", &L1_MinimumBiasHF1_AND_v1, &b_L1_MinimumBiasHF1_AND_v1);
  fChain->SetBranchAddress("L1_SingleJet16", &L1_SingleJet16, &b_L1_SingleJet16);
  fChain->SetBranchAddress("L1_SingleEG2", &L1_SingleEG2, &b_L1_SingleEG2);
  fChain->SetBranchAddress("L1_AlwaysTrue", &L1_AlwaysTrue, &b_L1_AlwaysTrue);
  fChain->SetBranchAddress("L1_ZeroBias", &L1_ZeroBias, &b_L1_ZeroBias);

   // Autogenerated L1 - Prescale SetBranchAddressBits 
  fChain->SetBranchAddress("L1Tech_CASTOR_HaloMuon.v0_Prescl", &L1Tech_CASTOR_HaloMuonv0_Prescl, &b_L1Tech_CASTOR_HaloMuonv0_Prescl);
  fChain->SetBranchAddress("L1Tech_CASTOR_MediumJet.v0_Prescl", &L1Tech_CASTOR_MediumJetv0_Prescl, &b_L1Tech_CASTOR_MediumJetv0_Prescl);
  fChain->SetBranchAddress("L1Tech_CASTOR_HighJet.v0_Prescl", &L1Tech_CASTOR_HighJetv0_Prescl, &b_L1Tech_CASTOR_HighJetv0_Prescl);
  fChain->SetBranchAddress("L1Tech_CASTOR_Gap.v0_Prescl", &L1Tech_CASTOR_Gapv0_Prescl, &b_L1Tech_CASTOR_Gapv0_Prescl);
  fChain->SetBranchAddress("L1Tech_TOTEM_3_Prescl", &L1Tech_TOTEM_3_Prescl, &b_L1Tech_TOTEM_3_Prescl);
  fChain->SetBranchAddress("L1Tech_TOTEM_2_Prescl", &L1Tech_TOTEM_2_Prescl, &b_L1Tech_TOTEM_2_Prescl);
  fChain->SetBranchAddress("L1Tech_TOTEM_1_Prescl", &L1Tech_TOTEM_1_Prescl, &b_L1Tech_TOTEM_1_Prescl);
  fChain->SetBranchAddress("L1Tech_TOTEM_0_Prescl", &L1Tech_TOTEM_0_Prescl, &b_L1Tech_TOTEM_0_Prescl);
  fChain->SetBranchAddress("L1Tech__TTU_RB0_Cosmics.v0_Prescl", &L1Tech__TTU_RB0_Cosmicsv0_Prescl, &b_L1Tech__TTU_RB0_Cosmicsv0_Prescl);
  fChain->SetBranchAddress("L1Tech_RPC_TTU_RBplus1_Cosmics.v0_Prescl", &L1Tech_RPC_TTU_RBplus1_Cosmicsv0_Prescl, &b_L1Tech_RPC_TTU_RBplus1_Cosmicsv0_Prescl);
  fChain->SetBranchAddress("L1Tech_RPC_TTU_RBplus2_Cosmics.v0_Prescl", &L1Tech_RPC_TTU_RBplus2_Cosmicsv0_Prescl, &b_L1Tech_RPC_TTU_RBplus2_Cosmicsv0_Prescl);
  fChain->SetBranchAddress("L1Tech_RPC_TTU_pointing_Cosmics.v0_Prescl", &L1Tech_RPC_TTU_pointing_Cosmicsv0_Prescl, &b_L1Tech_RPC_TTU_pointing_Cosmicsv0_Prescl);
  fChain->SetBranchAddress("L1Tech_RPC_TTU_barrel_Cosmics.v0_Prescl", &L1Tech_RPC_TTU_barrel_Cosmicsv0_Prescl, &b_L1Tech_RPC_TTU_barrel_Cosmicsv0_Prescl);
  fChain->SetBranchAddress("L1Tech_DT_GlobalOR.v0_Prescl", &L1Tech_DT_GlobalORv0_Prescl, &b_L1Tech_DT_GlobalORv0_Prescl);
  fChain->SetBranchAddress("L1Tech_BPTX_PreBPTX.v0_Prescl", &L1Tech_BPTX_PreBPTXv0_Prescl, &b_L1Tech_BPTX_PreBPTXv0_Prescl);
  fChain->SetBranchAddress("L1Tech_HCAL_HBHE_totalOR.v0_Prescl", &L1Tech_HCAL_HBHE_totalORv0_Prescl, &b_L1Tech_HCAL_HBHE_totalORv0_Prescl);
  fChain->SetBranchAddress("L1Tech_HCAL_HO_totalOR.v0_Prescl", &L1Tech_HCAL_HO_totalORv0_Prescl, &b_L1Tech_HCAL_HO_totalORv0_Prescl);
  fChain->SetBranchAddress("L1Tech_HCAL_HF_MMP_or_MPP.v1_Prescl", &L1Tech_HCAL_HF_MMP_or_MPPv1_Prescl, &b_L1Tech_HCAL_HF_MMP_or_MPPv1_Prescl);
  fChain->SetBranchAddress("L1Tech_HCAL_HF_coincidence_PM.v2_Prescl", &L1Tech_HCAL_HF_coincidence_PMv2_Prescl, &b_L1Tech_HCAL_HF_coincidence_PMv2_Prescl);
  fChain->SetBranchAddress("L1Tech_HCAL_HF_single_channel.v0_Prescl", &L1Tech_HCAL_HF_single_channelv0_Prescl, &b_L1Tech_HCAL_HF_single_channelv0_Prescl);
  fChain->SetBranchAddress("L1Tech_BPTX_quiet.v0_Prescl", &L1Tech_BPTX_quietv0_Prescl, &b_L1Tech_BPTX_quietv0_Prescl);
  fChain->SetBranchAddress("L1Tech_BPTX_minus_AND_not_plus.v0_Prescl", &L1Tech_BPTX_minus_AND_not_plusv0_Prescl, &b_L1Tech_BPTX_minus_AND_not_plusv0_Prescl);
  fChain->SetBranchAddress("L1Tech_BPTX_plus_AND_NOT_minus.v0_Prescl", &L1Tech_BPTX_plus_AND_NOT_minusv0_Prescl, &b_L1Tech_BPTX_plus_AND_NOT_minusv0_Prescl);
  fChain->SetBranchAddress("L1Tech_BPTX_plus_AND_minus_instance1.v0_Prescl", &L1Tech_BPTX_plus_AND_minus_instance1v0_Prescl, &b_L1Tech_BPTX_plus_AND_minus_instance1v0_Prescl);
  fChain->SetBranchAddress("L1Tech_BPTX_plus_OR_minus.v0_Prescl", &L1Tech_BPTX_plus_OR_minusv0_Prescl, &b_L1Tech_BPTX_plus_OR_minusv0_Prescl);
  fChain->SetBranchAddress("L1Tech_BPTX_minus.v0_Prescl", &L1Tech_BPTX_minusv0_Prescl, &b_L1Tech_BPTX_minusv0_Prescl);
  fChain->SetBranchAddress("L1Tech_BPTX_plus.v0_Prescl", &L1Tech_BPTX_plusv0_Prescl, &b_L1Tech_BPTX_plusv0_Prescl);
  fChain->SetBranchAddress("L1Tech_BPTX_plus_AND_minus.v0_Prescl", &L1Tech_BPTX_plus_AND_minusv0_Prescl, &b_L1Tech_BPTX_plus_AND_minusv0_Prescl);
  fChain->SetBranchAddress("L1_SingleMuBeamHalo_Prescl", &L1_SingleMuBeamHalo_Prescl, &b_L1_SingleMuBeamHalo_Prescl);
  fChain->SetBranchAddress("L1_DoubleMu_10_0_WdEta18_Prescl", &L1_DoubleMu_10_0_WdEta18_Prescl, &b_L1_DoubleMu_10_0_WdEta18_Prescl);
  fChain->SetBranchAddress("L1_DoubleMu_12_5_Prescl", &L1_DoubleMu_12_5_Prescl, &b_L1_DoubleMu_12_5_Prescl);
  fChain->SetBranchAddress("L1_DoubleMu0_Eta1p6_WdEta18_OS_Prescl", &L1_DoubleMu0_Eta1p6_WdEta18_OS_Prescl, &b_L1_DoubleMu0_Eta1p6_WdEta18_OS_Prescl);
  fChain->SetBranchAddress("L1_SingleMu18er_Prescl", &L1_SingleMu18er_Prescl, &b_L1_SingleMu18er_Prescl);
  fChain->SetBranchAddress("L1_QuadMu0_Prescl", &L1_QuadMu0_Prescl, &b_L1_QuadMu0_Prescl);
  fChain->SetBranchAddress("L1_TripleJet_92_76_64_Prescl", &L1_TripleJet_92_76_64_Prescl, &b_L1_TripleJet_92_76_64_Prescl);
  fChain->SetBranchAddress("L1_RomanPotsAND_Prescl", &L1_RomanPotsAND_Prescl, &b_L1_RomanPotsAND_Prescl);
  fChain->SetBranchAddress("L1_ETT130_Prescl", &L1_ETT130_Prescl, &b_L1_ETT130_Prescl);
  fChain->SetBranchAddress("L1_ETM70_NotJet52WdPhi2_Prescl", &L1_ETM70_NotJet52WdPhi2_Prescl, &b_L1_ETM70_NotJet52WdPhi2_Prescl);
  fChain->SetBranchAddress("L1_ETM60_NotJet52WdPhi2_Prescl", &L1_ETM60_NotJet52WdPhi2_Prescl, &b_L1_ETM60_NotJet52WdPhi2_Prescl);
  fChain->SetBranchAddress("L1_DoubleMu0_Eta1p6_WdEta18_Prescl", &L1_DoubleMu0_Eta1p6_WdEta18_Prescl, &b_L1_DoubleMu0_Eta1p6_WdEta18_Prescl);
  fChain->SetBranchAddress("L1_DoubleJetC56_ETM60_Prescl", &L1_DoubleJetC56_ETM60_Prescl, &b_L1_DoubleJetC56_ETM60_Prescl);
  fChain->SetBranchAddress("L1_SingleJetC20_NotBptxOR_Prescl", &L1_SingleJetC20_NotBptxOR_Prescl, &b_L1_SingleJetC20_NotBptxOR_Prescl);
  fChain->SetBranchAddress("L1_QuadJetC60_Prescl", &L1_QuadJetC60_Prescl, &b_L1_QuadJetC60_Prescl);
  fChain->SetBranchAddress("L1_DoubleJetC100_Prescl", &L1_DoubleJetC100_Prescl, &b_L1_DoubleJetC100_Prescl);
  fChain->SetBranchAddress("L1_ETM60_Prescl", &L1_ETM60_Prescl, &b_L1_ETM60_Prescl);
  fChain->SetBranchAddress("L1_Jet32_MuOpen_EG10_MuEGNotWdPhi3_JetMuWdPhi1_Prescl", &L1_Jet32_MuOpen_EG10_MuEGNotWdPhi3_JetMuWdPhi1_Prescl, &b_L1_Jet32_MuOpen_EG10_MuEGNotWdPhi3_JetMuWdPhi1_Prescl);
  fChain->SetBranchAddress("L1_Jet32_DoubleMu_Open_10_MuMuNotWdPhi23_JetMuWdPhi1_Prescl", &L1_Jet32_DoubleMu_Open_10_MuMuNotWdPhi23_JetMuWdPhi1_Prescl, &b_L1_Jet32_DoubleMu_Open_10_MuMuNotWdPhi23_JetMuWdPhi1_Prescl);
  fChain->SetBranchAddress("L1_DoubleJetC32_WdPhi7_HTT125_Prescl", &L1_DoubleJetC32_WdPhi7_HTT125_Prescl, &b_L1_DoubleJetC32_WdPhi7_HTT125_Prescl);
  fChain->SetBranchAddress("L1_DoubleJetC60_ETM60_Prescl", &L1_DoubleJetC60_ETM60_Prescl, &b_L1_DoubleJetC60_ETM60_Prescl);
  fChain->SetBranchAddress("L1_Mu0er_ETM55_Prescl", &L1_Mu0er_ETM55_Prescl, &b_L1_Mu0er_ETM55_Prescl);
  fChain->SetBranchAddress("L1_DoubleEG_20_10_1LegIso_Prescl", &L1_DoubleEG_20_10_1LegIso_Prescl, &b_L1_DoubleEG_20_10_1LegIso_Prescl);
  fChain->SetBranchAddress("L1_DoubleEG_22_10_Prescl", &L1_DoubleEG_22_10_Prescl, &b_L1_DoubleEG_22_10_Prescl);
  fChain->SetBranchAddress("L1_DoubleEG_15_10_Prescl", &L1_DoubleEG_15_10_Prescl, &b_L1_DoubleEG_15_10_Prescl);
  fChain->SetBranchAddress("L1_TripleEG_14_10_8_Prescl", &L1_TripleEG_14_10_8_Prescl, &b_L1_TripleEG_14_10_8_Prescl);
  fChain->SetBranchAddress("L1_SingleJet12_Prescl", &L1_SingleJet12_Prescl, &b_L1_SingleJet12_Prescl);
  fChain->SetBranchAddress("L1_TripleMu_5_5_3_Prescl", &L1_TripleMu_5_5_3_Prescl, &b_L1_TripleMu_5_5_3_Prescl);
  fChain->SetBranchAddress("L1_TripleMu0_Prescl", &L1_TripleMu0_Prescl, &b_L1_TripleMu0_Prescl);
  fChain->SetBranchAddress("L1_DoubleMuOpen_Prescl", &L1_DoubleMuOpen_Prescl, &b_L1_DoubleMuOpen_Prescl);
  fChain->SetBranchAddress("L1_ETT90_Prescl", &L1_ETT90_Prescl, &b_L1_ETT90_Prescl);
  fChain->SetBranchAddress("L1_ETT60_Prescl", &L1_ETT60_Prescl, &b_L1_ETT60_Prescl);
  fChain->SetBranchAddress("L1_QuadJetC36_TauJet52_Prescl", &L1_QuadJetC36_TauJet52_Prescl, &b_L1_QuadJetC36_TauJet52_Prescl);
  fChain->SetBranchAddress("L1_DoubleEG6_HTT150_Prescl", &L1_DoubleEG6_HTT150_Prescl, &b_L1_DoubleEG6_HTT150_Prescl);
  fChain->SetBranchAddress("L1_Mu5_DoubleEG5_Prescl", &L1_Mu5_DoubleEG5_Prescl, &b_L1_Mu5_DoubleEG5_Prescl);
  fChain->SetBranchAddress("L1_DoubleMu6_EG6_Prescl", &L1_DoubleMu6_EG6_Prescl, &b_L1_DoubleMu6_EG6_Prescl);
  fChain->SetBranchAddress("L1_SingleMuOpen_NotBptxOR_Prescl", &L1_SingleMuOpen_NotBptxOR_Prescl, &b_L1_SingleMuOpen_NotBptxOR_Prescl);
  fChain->SetBranchAddress("L1_Mu4_EG18_Prescl", &L1_Mu4_EG18_Prescl, &b_L1_Mu4_EG18_Prescl);
  fChain->SetBranchAddress("L1_Mu8_HTT125_Prescl", &L1_Mu8_HTT125_Prescl, &b_L1_Mu8_HTT125_Prescl);
  fChain->SetBranchAddress("L1_SingleMu16_Eta2p1_Prescl", &L1_SingleMu16_Eta2p1_Prescl, &b_L1_SingleMu16_Eta2p1_Prescl);
  fChain->SetBranchAddress("L1_DoubleMu7_EG7_Prescl", &L1_DoubleMu7_EG7_Prescl, &b_L1_DoubleMu7_EG7_Prescl);
  fChain->SetBranchAddress("L1_Mu14er_ETM30_Prescl", &L1_Mu14er_ETM30_Prescl, &b_L1_Mu14er_ETM30_Prescl);
  fChain->SetBranchAddress("L1_Mu10er_ETM50_Prescl", &L1_Mu10er_ETM50_Prescl, &b_L1_Mu10er_ETM50_Prescl);
  fChain->SetBranchAddress("L1_Mu6_HTT150_Prescl", &L1_Mu6_HTT150_Prescl, &b_L1_Mu6_HTT150_Prescl);
  fChain->SetBranchAddress("L1_Mu20_EG8_Prescl", &L1_Mu20_EG8_Prescl, &b_L1_Mu20_EG8_Prescl);
  fChain->SetBranchAddress("L1_HTT250_Prescl", &L1_HTT250_Prescl, &b_L1_HTT250_Prescl);
  fChain->SetBranchAddress("L1_ETM40_Prescl", &L1_ETM40_Prescl, &b_L1_ETM40_Prescl);
  fChain->SetBranchAddress("L1_SingleJetC32_NotBptxOR_Prescl", &L1_SingleJetC32_NotBptxOR_Prescl, &b_L1_SingleJetC32_NotBptxOR_Prescl);
  fChain->SetBranchAddress("L1_Mu6_DoubleEG10_Prescl", &L1_Mu6_DoubleEG10_Prescl, &b_L1_Mu6_DoubleEG10_Prescl);
  fChain->SetBranchAddress("L1_Mu5_IsoEG18_Prescl", &L1_Mu5_IsoEG18_Prescl, &b_L1_Mu5_IsoEG18_Prescl);
  fChain->SetBranchAddress("L1_Mu5_EG20_Prescl", &L1_Mu5_EG20_Prescl, &b_L1_Mu5_EG20_Prescl);
  fChain->SetBranchAddress("L1_Mu20_EG10_Prescl", &L1_Mu20_EG10_Prescl, &b_L1_Mu20_EG10_Prescl);
  fChain->SetBranchAddress("L1_HTT200_Prescl", &L1_HTT200_Prescl, &b_L1_HTT200_Prescl);
  fChain->SetBranchAddress("L1_HTT175_Prescl", &L1_HTT175_Prescl, &b_L1_HTT175_Prescl);
  fChain->SetBranchAddress("L1_HTT150_Prescl", &L1_HTT150_Prescl, &b_L1_HTT150_Prescl);
  fChain->SetBranchAddress("L1_HTT125_Prescl", &L1_HTT125_Prescl, &b_L1_HTT125_Prescl);
  fChain->SetBranchAddress("L1_ETM100_Prescl", &L1_ETM100_Prescl, &b_L1_ETM100_Prescl);
  fChain->SetBranchAddress("L1_ETM70_Prescl", &L1_ETM70_Prescl, &b_L1_ETM70_Prescl);
  fChain->SetBranchAddress("L1_ETM50_Prescl", &L1_ETM50_Prescl, &b_L1_ETM50_Prescl);
  fChain->SetBranchAddress("L1_ETM30_Prescl", &L1_ETM30_Prescl, &b_L1_ETM30_Prescl);
  fChain->SetBranchAddress("L1_SingleMu30_Prescl", &L1_SingleMu30_Prescl, &b_L1_SingleMu30_Prescl);
  fChain->SetBranchAddress("L1_SingleMu25_Prescl", &L1_SingleMu25_Prescl, &b_L1_SingleMu25_Prescl);
  fChain->SetBranchAddress("L1_SingleMu25er_Prescl", &L1_SingleMu25er_Prescl, &b_L1_SingleMu25er_Prescl);
  fChain->SetBranchAddress("L1_SingleMu20_Prescl", &L1_SingleMu20_Prescl, &b_L1_SingleMu20_Prescl);
  fChain->SetBranchAddress("L1_SingleMu12_Prescl", &L1_SingleMu12_Prescl, &b_L1_SingleMu12_Prescl);
  fChain->SetBranchAddress("L1_SingleMu20er_Prescl", &L1_SingleMu20er_Prescl, &b_L1_SingleMu20er_Prescl);
  fChain->SetBranchAddress("L1_ETT40_Prescl", &L1_ETT40_Prescl, &b_L1_ETT40_Prescl);
  fChain->SetBranchAddress("L1_SingleMu5_Prescl", &L1_SingleMu5_Prescl, &b_L1_SingleMu5_Prescl);
  fChain->SetBranchAddress("L1_SingleEG15_Prescl", &L1_SingleEG15_Prescl, &b_L1_SingleEG15_Prescl);
  fChain->SetBranchAddress("L1_SingleMu16_Prescl", &L1_SingleMu16_Prescl, &b_L1_SingleMu16_Prescl);
  fChain->SetBranchAddress("L1_SingleMuOpen_Prescl", &L1_SingleMuOpen_Prescl, &b_L1_SingleMuOpen_Prescl);
  fChain->SetBranchAddress("L1_SingleEG35_Prescl", &L1_SingleEG35_Prescl, &b_L1_SingleEG35_Prescl);
  fChain->SetBranchAddress("L1_SingleEG30_Prescl", &L1_SingleEG30_Prescl, &b_L1_SingleEG30_Prescl);
  fChain->SetBranchAddress("L1_SingleEG20_Prescl", &L1_SingleEG20_Prescl, &b_L1_SingleEG20_Prescl);
  fChain->SetBranchAddress("L1_SingleIsoEG20er_Prescl", &L1_SingleIsoEG20er_Prescl, &b_L1_SingleIsoEG20er_Prescl);
  fChain->SetBranchAddress("L1_SingleIsoEG18_Prescl", &L1_SingleIsoEG18_Prescl, &b_L1_SingleIsoEG18_Prescl);
  fChain->SetBranchAddress("L1_SingleEG40_Prescl", &L1_SingleEG40_Prescl, &b_L1_SingleEG40_Prescl);
  fChain->SetBranchAddress("L1_SingleEG25_Prescl", &L1_SingleEG25_Prescl, &b_L1_SingleEG25_Prescl);
  fChain->SetBranchAddress("L1_SingleEG5_Prescl", &L1_SingleEG5_Prescl, &b_L1_SingleEG5_Prescl);
  fChain->SetBranchAddress("L1_QuadJetC40_Prescl", &L1_QuadJetC40_Prescl, &b_L1_QuadJetC40_Prescl);
  fChain->SetBranchAddress("L1_DoubleMu_10_3p5_Prescl", &L1_DoubleMu_10_3p5_Prescl, &b_L1_DoubleMu_10_3p5_Prescl);
  fChain->SetBranchAddress("L1_DoubleMu_10_Open_Prescl", &L1_DoubleMu_10_Open_Prescl, &b_L1_DoubleMu_10_Open_Prescl);
  fChain->SetBranchAddress("L1_DoubleJetC112_Prescl", &L1_DoubleJetC112_Prescl, &b_L1_DoubleJetC112_Prescl);
  fChain->SetBranchAddress("L1_SingleMu14_Eta2p1_Prescl", &L1_SingleMu14_Eta2p1_Prescl, &b_L1_SingleMu14_Eta2p1_Prescl);
  fChain->SetBranchAddress("L1_DoubleJetC84_Prescl", &L1_DoubleJetC84_Prescl, &b_L1_DoubleJetC84_Prescl);
  fChain->SetBranchAddress("L1_DoubleJetC52_Prescl", &L1_DoubleJetC52_Prescl, &b_L1_DoubleJetC52_Prescl);
  fChain->SetBranchAddress("L1_SingleJet240_Prescl", &L1_SingleJet240_Prescl, &b_L1_SingleJet240_Prescl);
  fChain->SetBranchAddress("L1_SingleIsoEG22er_Prescl", &L1_SingleIsoEG22er_Prescl, &b_L1_SingleIsoEG22er_Prescl);
  fChain->SetBranchAddress("L1_SingleEG10_Prescl", &L1_SingleEG10_Prescl, &b_L1_SingleEG10_Prescl);
  fChain->SetBranchAddress("L1_SingleIsoEG30er_Prescl", &L1_SingleIsoEG30er_Prescl, &b_L1_SingleIsoEG30er_Prescl);
  fChain->SetBranchAddress("L1_SingleIsoEG28er_Prescl", &L1_SingleIsoEG28er_Prescl, &b_L1_SingleIsoEG28er_Prescl);
  fChain->SetBranchAddress("L1_SingleIsoEG25_Prescl", &L1_SingleIsoEG25_Prescl, &b_L1_SingleIsoEG25_Prescl);
  fChain->SetBranchAddress("L1_SingleIsoEG25er_Prescl", &L1_SingleIsoEG25er_Prescl, &b_L1_SingleIsoEG25er_Prescl);
  fChain->SetBranchAddress("L1_SingleEG35er_Prescl", &L1_SingleEG35er_Prescl, &b_L1_SingleEG35er_Prescl);
  fChain->SetBranchAddress("L1_EG25er_HTT125_Prescl", &L1_EG25er_HTT125_Prescl, &b_L1_EG25er_HTT125_Prescl);
  fChain->SetBranchAddress("L1_Mu3_JetC52_WdEtaPhi2_Prescl", &L1_Mu3_JetC52_WdEtaPhi2_Prescl, &b_L1_Mu3_JetC52_WdEtaPhi2_Prescl);
  fChain->SetBranchAddress("L1_Mu3_JetC16_WdEtaPhi2_Prescl", &L1_Mu3_JetC16_WdEtaPhi2_Prescl, &b_L1_Mu3_JetC16_WdEtaPhi2_Prescl);
  fChain->SetBranchAddress("L1_ETT15_Prescl", &L1_ETT15_Prescl, &b_L1_ETT15_Prescl);
  fChain->SetBranchAddress("L1_SingleMu30er_Prescl", &L1_SingleMu30er_Prescl, &b_L1_SingleMu30er_Prescl);
  fChain->SetBranchAddress("L1_DoubleMu0_Prescl", &L1_DoubleMu0_Prescl, &b_L1_DoubleMu0_Prescl);
  fChain->SetBranchAddress("L1_DoubleTauJet44er_Prescl", &L1_DoubleTauJet44er_Prescl, &b_L1_DoubleTauJet44er_Prescl);
  fChain->SetBranchAddress("L1_DoubleTauJet36er_Prescl", &L1_DoubleTauJet36er_Prescl, &b_L1_DoubleTauJet36er_Prescl);
  fChain->SetBranchAddress("L1_SingleJet36_Prescl", &L1_SingleJet36_Prescl, &b_L1_SingleJet36_Prescl);
  fChain->SetBranchAddress("L1_SingleJet200_Prescl", &L1_SingleJet200_Prescl, &b_L1_SingleJet200_Prescl);
  fChain->SetBranchAddress("L1_SingleJet176_Prescl", &L1_SingleJet176_Prescl, &b_L1_SingleJet176_Prescl);
  fChain->SetBranchAddress("L1_SingleJet128_Prescl", &L1_SingleJet128_Prescl, &b_L1_SingleJet128_Prescl);
  fChain->SetBranchAddress("L1_SingleJet92_Prescl", &L1_SingleJet92_Prescl, &b_L1_SingleJet92_Prescl);
  fChain->SetBranchAddress("L1_SingleJet68_Prescl", &L1_SingleJet68_Prescl, &b_L1_SingleJet68_Prescl);
  fChain->SetBranchAddress("L1_SingleJet52_Prescl", &L1_SingleJet52_Prescl, &b_L1_SingleJet52_Prescl);
  fChain->SetBranchAddress("L1_DoubleJetC120_Prescl", &L1_DoubleJetC120_Prescl, &b_L1_DoubleJetC120_Prescl);
  fChain->SetBranchAddress("L1_DoubleJetC72_Prescl", &L1_DoubleJetC72_Prescl, &b_L1_DoubleJetC72_Prescl);
  fChain->SetBranchAddress("L1_QuadJetC84_Prescl", &L1_QuadJetC84_Prescl, &b_L1_QuadJetC84_Prescl);
  fChain->SetBranchAddress("L1_Mu16er_TauJet20er_Prescl", &L1_Mu16er_TauJet20er_Prescl, &b_L1_Mu16er_TauJet20er_Prescl);
  fChain->SetBranchAddress("L1_IsoEG20er_TauJet20er_NotWdEta0_Prescl", &L1_IsoEG20er_TauJet20er_NotWdEta0_Prescl, &b_L1_IsoEG20er_TauJet20er_NotWdEta0_Prescl);
  fChain->SetBranchAddress("L1_DoubleTauJet40er_Prescl", &L1_DoubleTauJet40er_Prescl, &b_L1_DoubleTauJet40er_Prescl);
  fChain->SetBranchAddress("L1_Mu5_EG15_Prescl", &L1_Mu5_EG15_Prescl, &b_L1_Mu5_EG15_Prescl);
  fChain->SetBranchAddress("L1_Mu12_EG10_Prescl", &L1_Mu12_EG10_Prescl, &b_L1_Mu12_EG10_Prescl);
  fChain->SetBranchAddress("L1_Mu16er_TauJet40erORCenJet72er_Prescl", &L1_Mu16er_TauJet40erORCenJet72er_Prescl, &b_L1_Mu16er_TauJet40erORCenJet72er_Prescl);
  fChain->SetBranchAddress("L1_MinimumBiasHF2_OR_Prescl", &L1_MinimumBiasHF2_OR_Prescl, &b_L1_MinimumBiasHF2_OR_Prescl);
  fChain->SetBranchAddress("L1_MinimumBiasHF2_AND_Prescl", &L1_MinimumBiasHF2_AND_Prescl, &b_L1_MinimumBiasHF2_AND_Prescl);
  fChain->SetBranchAddress("L1_MinimumBiasHF1_OR_Prescl", &L1_MinimumBiasHF1_OR_Prescl, &b_L1_MinimumBiasHF1_OR_Prescl);
  fChain->SetBranchAddress("L1_MinimumBiasHF1_AND_v1_Prescl", &L1_MinimumBiasHF1_AND_v1_Prescl, &b_L1_MinimumBiasHF1_AND_v1_Prescl);
  fChain->SetBranchAddress("L1_SingleJet16_Prescl", &L1_SingleJet16_Prescl, &b_L1_SingleJet16_Prescl);
  fChain->SetBranchAddress("L1_SingleEG2_Prescl", &L1_SingleEG2_Prescl, &b_L1_SingleEG2_Prescl);
  fChain->SetBranchAddress("L1_AlwaysTrue_Prescl", &L1_AlwaysTrue_Prescl, &b_L1_AlwaysTrue_Prescl);
  fChain->SetBranchAddress("L1_ZeroBias_Prescl", &L1_ZeroBias_Prescl, &b_L1_ZeroBias_Prescl);

   // Autogenerated from ConfDB - SetBranchAddressBits

   // Autogenerated from ConfDB - Prescale SetBranchAddressBits


   // Autogenerated from ConfDB - SetBranchAddressMaps

   // Autogenerated from ConfDB - Prescale SetBranchAddressMaps

   Notify();
}

void OHltTree::SetMapL1SeedsOfStandardHLTPath(OHltMenu *menu)
{
   map_L1SeedsOfStandardHLTPath = menu->GetL1SeedsOfHLTPathMap();
}

void OHltTree::ApplyL1Prescales(OHltMenu *menu, OHltConfig *cfg, OHltRateCounter *rc)
{
   TString st;
   unsigned int tt = menu->GetL1TriggerSize();
   for (unsigned int i=0;i<tt;i++)
   {
      st = menu->GetL1TriggerName(i);
      if (map_BitOfStandardHLTPath.find(st)->second == 1)
      {
         if (!prescaleResponseL1(menu,cfg,rc,i))
         {
            map_BitOfStandardHLTPath[st] = 0;
         }
      }
   }
}

void OHltTree::SetMapL1BitOfStandardHLTPath(OHltMenu *menu)
{
   int tt = 0;
   TString st;
   unsigned ts = menu->GetTriggerSize();
   for (unsigned int i=0;i<ts;i++)
   {
      st = menu->GetTriggerName(i);
      std::map< TString, std::vector<TString> >::const_iterator it = map_L1SeedsOfStandardHLTPath.find(st);
      if (it != map_L1SeedsOfStandardHLTPath.end())
      {
         tt = 0;
         unsigned ts2 = it->second.size();
         for (unsigned int j=0;j<ts2;j++)
         {
            tt += (map_BitOfStandardHLTPath.find((map_L1SeedsOfStandardHLTPath.find(st)->second)[j]))->second;
         }
      }
      map_L1BitOfStandardHLTPath[st] = tt;
   }
}


void OHltTree::SetMapL1BitOfStandardHLTPathUsingLogicParser(OHltMenu *menu, int nentry)
{
   typedef std::vector<TString> myvec;
   typedef std::pair< TString, std::vector<TString> > mypair;
   typedef std::pair< TString, std::vector<int> > mypair2;
   myvec vtmp;
   std::vector<int> vtokentmp;

   TString st, l1st, seeds;
   unsigned ts = menu->GetTriggerSize();
   unsigned l1ts = menu->GetL1TriggerSize();
   //  std::cout<<"########################### \n";
   //  std::cout <<  "@@@ Level1GTSeedResult\n";

   if (nentry == 0)
   { // do this only for first event - speed up code!
      for (unsigned int i=0;i<ts;i++)
      {
         vtmp.clear();
         vtokentmp.clear();
         st = menu->GetTriggerName(i);
         seeds = menu->GetSeedCondition(st);

         //if (seeds != "") continue; // if no seeds skip to avoid error messages

         SetLogicParser((std::string) seeds);

         //      std::cout << "Trigger name: " << st << std::endl;
         //      std::cout << "Seed condition: " << seeds << std::endl;

         std::vector<L1GtLogicParser::OperandToken>& algOpTokenVector =
         (m_l1AlgoLogicParser[i])->operandTokenVector();

         //std::cout<<"@@@@@@@@@@@@ "<<st<<std::endl;

         for (unsigned int j=0;j<l1ts;j++)
         {
            l1st = menu->GetL1TriggerName(j);

            for (size_t k = 0; k < algOpTokenVector.size(); ++k)
            {
               bool iResult = false;
               //	  std::cout << "Token name: " << (algOpTokenVector[k]).tokenName << std::endl;
               if (l1st.CompareTo((algOpTokenVector[k]).tokenName) == 0)
               {
                  if (map_BitOfStandardHLTPath.find(l1st)->second==1)
                  iResult = true;
                  else
                  iResult = false;

                  //	    std::cout << "Token result: " << map_BitOfStandardHLTPath.find(l1st)->second << std::endl;
                  //	    std::cout << "Token result: " << iResult << std::endl;
                  (algOpTokenVector[k]).tokenResult = iResult;
                  vtmp.push_back(l1st);
                  vtokentmp.push_back((int)k);
               }
            }
         }
         map_L1SeedsOfStandardHLTPath.insert(mypair(st, vtmp));
         map_RpnTokenIdOfStandardHLTPath.insert(mypair2(st, vtokentmp));

         bool seedsResult = (m_l1AlgoLogicParser[i])->expressionResult();

         //      std::cout << "Expression result: " << seedsResult << std::endl;

         if (seedsResult)
         map_L1BitOfStandardHLTPath[st] = 1;
         else
         map_L1BitOfStandardHLTPath[st] = 0;
      }
   }
   else
   {
      for (unsigned int i=0;i<ts;i++)
      {
         st = menu->GetTriggerName(i);
         seeds = menu->GetSeedCondition(st);

         if (seeds == "") continue; // 

         std::vector<L1GtLogicParser::OperandToken>& algOpTokenVector =
         (m_l1AlgoLogicParser[i])->operandTokenVector();

         //      std::cout << "************** " << st << " " << nentry << std::endl;

         std::map< TString, std::vector<TString> >::const_iterator it = map_L1SeedsOfStandardHLTPath.find(st);

         if (it != map_L1SeedsOfStandardHLTPath.end())
         {
            unsigned ts2 = it->second.size();
            //	std::cout << "########## " << ts2 << std::endl;
            for (unsigned int j=0;j<ts2;j++)
            {
               //	  std::cout << "               " << it->second[j] << std::endl;
               bool iResult = false;
               if ((map_BitOfStandardHLTPath.find(it->second[j])->second)==1)
               iResult = true;
               else
               iResult = false;

               (algOpTokenVector[ (map_RpnTokenIdOfStandardHLTPath.find(st))->second[j] ]).tokenResult = iResult;

            }
         }

         bool seedsResult = (m_l1AlgoLogicParser[i])->expressionResult();
         //      std::cout << "Expression result: " << seedsResult << std::endl;

         if (seedsResult)
         map_L1BitOfStandardHLTPath[st] = 1;
         else
         map_L1BitOfStandardHLTPath[st] = 0;
      }
   }

}

bool OHltTree::passPreFilterLogicParser(TString str, int nentry)
{

   if (str == "") return true;

   if (nentry == 0)
   { // do this only for first event - speed up code!
      m_preFilterLogicParser = new L1GtLogicParser((std::string)str);
   }

   //cout<<  map_BitOfStandardHLTPath["HLT_Activity_L1A"]<<std::endl;

   //std::cout << "Token string: " << (std::string)str << std::endl;

   std::vector<L1GtLogicParser::OperandToken>& prefOpTokenVector =
   m_preFilterLogicParser->operandTokenVector();

   //std::cout << "Token size: " << prefOpTokenVector.size() << std::endl;
   for (size_t k = 0; k < prefOpTokenVector.size(); ++k)
   {
      bool iResult = false;
      //std::cout << "Token name: " << (prefOpTokenVector[k]).tokenName << std::endl;
      if (map_BitOfStandardHLTPath.find((prefOpTokenVector[k]).tokenName)->second==1)
      iResult = true;
      else
      iResult = false;
      //std::cout << "Token result: " << iResult << std::endl;

      (prefOpTokenVector[k]).tokenResult = iResult;
   }
   bool expResult = m_preFilterLogicParser->expressionResult();
   //bool expResult = true;

   if (expResult)
   return true;
   else
   return false;

}

Bool_t OHltTree::Notify()
{
   // The Notify() function is called when a new file is opened. This
   // can be either for a new TTree in a TChain or when when a new TTree
   // is started when using PROOF. It is normally not necessary to make changes
   // to the generated code, but the routine can be extended by the
   // user if needed. The return value is currently not used.

   return kTRUE;
}

#endif // #ifdef OHltTree_cxx

#endif // #ifdef OHltTree_h
